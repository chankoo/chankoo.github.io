<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DB on chankoo</title>
    <link>https://chankoo.github.io/categories/db/</link>
    <description>Recent content in DB on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 24 May 2024 14:12:15 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/categories/db/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLite</title>
      <link>https://chankoo.github.io/posts/sqlite/</link>
      <pubDate>Fri, 24 May 2024 14:12:15 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/sqlite/</guid>
      <description>
        
          
            SQLite는 DBMS로 아래와 같은 특징이 있다.
파일 기반 DB DBMS 내 모든 데이터를 하나의 파일로 관리한다. 백업과 마이그레이션이 무척 편리하다. 서버리스 라이브러리 다른 DBMS와 달리 클라이언트-서버 아키텍처가 아님. 클라이언트 어플리케이션이 사용하는 라이브러리이다. 클라이언트 프로세스가 데이터베이스 엔진을 라이브러리로 사용하여, 파일IO를 통해 DBMS에 접근하는 것이다. DB 서버 프로세스와 통신하지 않으므로 IPC가 발생하지 않는다. 기존 클라이언트-서버 구조보다 더 가볍고, 빠를 수 있다. 이러한 특성 덕에 Django, 안드로이드 등에 기본적으로 내장되었다. 전체 DB를 잠그는 방식으로 락을 구현한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>DB 인덱스와 정렬</title>
      <link>https://chankoo.github.io/posts/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%A0%95%EB%A0%AC/</link>
      <pubDate>Sun, 28 Apr 2024 12:02:40 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%A0%95%EB%A0%AC/</guid>
      <description>
        
          
            B-Tree 계열 인덱스 사용시 정렬에 인덱스를 사용할 수 있으며, 그 효과가 인덱스 유지 비용보다 커야한다.
Mysql에서 쿼리에 order by가 사용되면 아래 3가지 중 하나로 처리한다. 아래로 갈수록 느리다.
인덱스 사용한 정렬 정렬 목적 인덱스가 있어야함. (정렬 대상 컬럼이 테이블의 첫번째 컬럼이며 , 정렬 되어있어야 함) B-Tree 계열 인덱스에서만 사용 File Sort SortBuffer에서 테이블을 정렬하는 방식 조인이 필요한 경우, 드라이빙 테이블(정렬 필요 테이블)을 먼저 정렬하고 조인한다. Using temporary; File Sort 임시 테이블을 만들고, 임시 테이블을 소트버퍼에서 정렬하는 방식 조인 후에 정렬이 필요한 경우이다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>2PL</title>
      <link>https://chankoo.github.io/posts/2pl/</link>
      <pubDate>Wed, 20 Dec 2023 21:29:31 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/2pl/</guid>
      <description>
        
          
            content Two Phase Locking. DB에서 직렬성을 구현하는데 널리 쓰이는 알고리즘.
잠금을 확장과 수축의 두단계로 나누어 모든 트랜잭션이 lock을 획득한 후 차례로 unlock 하기에 직렬성을 구현할 수 있다.
refs 데이터 중심 애플리케이션 설계 2 Phase Locking (2PL) : 네이버 블로그 links 직렬성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>전문 검색 인덱스</title>
      <link>https://chankoo.github.io/posts/%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link>
      <pubDate>Mon, 27 Nov 2023 15:57:04 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid>
      <description>
        
          
            컬럼 텍스트의 전체 값을 인덱싱해서 키워드 검색(full text search)을 용이하게 하는 방법으로 stopword, n-gram 등의 전문 검색 알고리즘을 사용한다.
refs Real MySQL links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Hash 인덱스</title>
      <link>https://chankoo.github.io/posts/hash-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link>
      <pubDate>Mon, 27 Nov 2023 15:46:10 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/hash-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid>
      <description>
        
          
            인덱싱할 컬럼 값의 해시를 키로 이용하는 인덱스. 동등 비교에 최적화(O(N)) 되었지만 범위 검색이나 정렬에는 전혀 사용할 수 없다.
refs Real MySQL links 해시 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Real MySQL</title>
      <link>https://chankoo.github.io/posts/real-mysql/</link>
      <pubDate>Mon, 27 Nov 2023 15:19:03 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/real-mysql/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>DBCP</title>
      <link>https://chankoo.github.io/posts/dbcp/</link>
      <pubDate>Wed, 22 Nov 2023 12:01:24 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dbcp/</guid>
      <description>
        
          
            DB Connection Pool. DB와의 커넥션 풀을 어플리케이션 단에 미리 만들어두는 것이다. DB와 커넥션을 맺고 끊기 위해 매번 TCP 통신하는 비용을 줄인다.
mysql 기준으로 성능에 중요한 설정 max_connections: 클라이언트와 맺을 수 있는 최대 커넥션 수 connect_timeout: 커넥션을 맺기 위해 기다리는 최대 시간(기본값 10초) wait_timeout: inactive 커넥션을 얼마까지 기다린 뒤 close 할지 설정(기본값 28800 - 8시간). 연결을 맺고 다음 쿼리까지 기다리는 최대 시간 django 기준으로 성능에 중요한 설정 django는 커넥션 풀을 지원하지 않고, 요청마다 커넥션을 맺고 끊는다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Mysql 인덱스</title>
      <link>https://chankoo.github.io/posts/mysql-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link>
      <pubDate>Tue, 21 Nov 2023 19:20:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/mysql-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid>
      <description>
        
          
            mysql의 InnoDB는 아래와 같은 구조로 인덱스를 생성한다. 해당 인덱스는 B-Tree 로 기본키를 저장하고, 기본키는 데이터에 접근한다. 이때 기본키와 데이터는 같은 공간에 저장한다. 이를 클러스터드 인덱스(테이블이 곧 기본키 인덱스)라고 부른다.
refs [MySQL] B-Tree로 인덱스(Index)에 대해 쉽고 완벽하게 이해하기 - MangKyu&amp;rsquo;s Diary 데이터 중심 애플리케이션 설계 links B-Tree Hash 인덱스 전문 검색 인덱스 Real MySQL 
          
          
        
      </description>
    </item>
    
    <item>
      <title>역색인</title>
      <link>https://chankoo.github.io/posts/%EC%97%AD%EC%83%89%EC%9D%B8/</link>
      <pubDate>Sun, 19 Nov 2023 12:43:25 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%97%AD%EC%83%89%EC%9D%B8/</guid>
      <description>
        
          
            키워드에 문서 인덱스를 저장하는 작업으로, 키워드를 포함한 문서를 빠르게 찾는 역인덱스이다.
예를 들어,
&amp;ldquo;검색 엔진은 정보를 빠르게 찾을 수 있는 도구이다.&amp;rdquo; &amp;ldquo;인덱스는 검색을 효율적으로 만들어주는 역할을 한다.&amp;rdquo; 위 문서들을 역색인 하면 아래와 같이 저장한다.
{ &amp;#34;검색&amp;#34;: [1, 2], &amp;#34;엔진&amp;#34;: [1], &amp;#34;정보&amp;#34;: [1], &amp;#34;빠르게&amp;#34;: [1], &amp;#34;찾다&amp;#34;: [1], &amp;#34;도구&amp;#34;: [1], &amp;#34;인덱스&amp;#34;: [2], &amp;#34;효율적으로&amp;#34;: [2], &amp;#34;만들다&amp;#34;: [2], &amp;#34;역할&amp;#34;: [2] } 전문 검색 인덱스 역시 검색이 필요한 단어를 모두 인덱싱하는 방식으로, 역색인을 사용한다.?
{ 1: [&amp;#34;검색&amp;#34;, &amp;#34;엔진&amp;#34;, &amp;#34;정보&amp;#34;, &amp;#34;빠르게&amp;#34;, &amp;#34;찾을&amp;#34;, &amp;#34;수&amp;#34;, &amp;#34;있는&amp;#34;, &amp;#34;도구&amp;#34;], 2: [&amp;#34;인덱스&amp;#34;, &amp;#34;검색&amp;#34;, &amp;#34;효율적으로&amp;#34;, &amp;#34;만들어주는&amp;#34;, &amp;#34;역할&amp;#34;, &amp;#34;한다&amp;#34;] } refs 6.
          
          
        
      </description>
    </item>
    
    <item>
      <title>타임존 이슈</title>
      <link>https://chankoo.github.io/posts/%ED%83%80%EC%9E%84%EC%A1%B4-%EC%9D%B4%EC%8A%88/</link>
      <pubDate>Wed, 18 Jan 2023 11:31:14 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%83%80%EC%9E%84%EC%A1%B4-%EC%9D%B4%EC%8A%88/</guid>
      <description>
        
          
            datetime이 타임존과 엮여 표현되는 방식을 이해하고 헷갈리지 말자
db 타임존 설정은 보통 SYSTEM의 타임존 설정을 따르게 되어있음 SELECT @@global.time_zone; db가 돌고있는 시스템(보통 docker의 커널)의 타임존 설정은 대개 UTC +0000임. 때문에 DB의 타임존은 UTC를 따르는 것이 보통이고 표준이다.
db에 저장된 예시 데이터를 보면
한눈에 봐도 이른시간이 찍혀있고, UTC 기준임
datetime 데이터는 불변이라는 것을 잊으면 안된다. 데이터를 표현하는 방법이 타임존에 따라 여러가지 인 것이다.
DB가 UTC를 따르고, Django에서 TIME_ZONE = &#39;Asia/Seoul&#39;; USE_TZ = True 로 지정한다면
          
          
        
      </description>
    </item>
    
    <item>
      <title>Phantom Reads</title>
      <link>https://chankoo.github.io/posts/phantom-reads/</link>
      <pubDate>Mon, 10 Oct 2022 17:37:43 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/phantom-reads/</guid>
      <description>
        
          
            range select 하는 쿼리를 반복해서 실행할때, 다른 트랜잭션의 영향으로 결과 셋이 달라지는 현상. 존재하지 않는(phantom) 새로운 행들이 나타나거나, 그렇게 나타난 행들이 사라지는 상태를 의미한다.
Serializable을 제외한 격리 수준에서 모두 발생한다. gap lock을 쓰지 않는다면, range select 쿼리의 대상인 rows set 외에는 락이 걸려있지 않으므로, 다른 트랜잭션이 새로운 row를 만들 수 있고, 그 row가 다음번 range select 에 걸릴 수 있는 것이다.
refs links Isolation Levels 직렬성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>직렬성</title>
      <link>https://chankoo.github.io/posts/%EC%A7%81%EB%A0%AC%EC%84%B1/</link>
      <pubDate>Mon, 10 Oct 2022 17:20:14 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%A7%81%EB%A0%AC%EC%84%B1/</guid>
      <description>
        
          
            DB 에서 직렬성은 모든 트랜잭션을 순차적으로 수행하는 것과 같은 결과를 내는 격리 수준을 의미한다.
보통 아래 세가지 방법 중 하나로 구현하는데,
실제적인 직렬 실행 - 순차적으로 트랜잭션을 실행한다. 2PL 낙관적 동시성 제어(ex. 직렬성 스냅숏 격리) refs 데이터 중심 애플리케이션 설계 links 2PL Isolation Levels 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Transaction</title>
      <link>https://chankoo.github.io/posts/transaction/</link>
      <pubDate>Mon, 10 Oct 2022 16:37:09 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/transaction/</guid>
      <description>
        
          
            DB에서 데이터를 조작하는 논리적 작업 단위. 이론적으로 Transaction은 ACID해야한다.
예로 들면, 송금은 한 Transaction 이어야 하는데, 송금을 구성하는 1) 본인 계좌에서 출금 2) 상대 계좌에 입금이
Atomic - 발생하거나, 발생하지 않거나하여 그 중간 상태가 없어야하며 Correct(Consistant) - 송금 실행 전 후 모두 관련된 제약을 지키는 상태여야하며 Isolated - 송금 실행 중 다른 Transaction과는 격리(read x, write x)되어야 하며 Durable - 송금 성공의 시점 데이터를 지속적으로 보관해야한다. refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Isolation Levels</title>
      <link>https://chankoo.github.io/posts/isolation-levels/</link>
      <pubDate>Sun, 09 Oct 2022 12:37:01 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/isolation-levels/</guid>
      <description>
        
          
            Transaction 간 격리 수준
DBMS는 다양한 수준의 Isolation Level을 제공하여 ACID의 Isolation 관점에서 엄격히 제한된 Transaction의 병행성 제약을 완화한다. 이상적으로 Transaction은 엄격히 격리해야 하지만, 실무적으로 걸림돌이 되기에, 격리 수준을 단계적으로 완화하는 Isolation Levels 를 정의하여 상황에 맞게 제공한다.
Serializable - Isolation 제약을 지키는 수준으로 트랜잭션을 serial schedule 로 수행하여 다른 트랜잭션의 수행과 겹치는 시간이 없다. Repeatable Reads 반복해서 읽어도 같은 결과를 보여주는 수준으로, 반복 read 도중 커밋이 발생하여 값이 변해도 커밋 전 값을 읽어간다.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
