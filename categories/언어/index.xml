<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>언어 on chankoo</title>
    <link>https://chankoo.github.io/categories/%EC%96%B8%EC%96%B4/</link>
    <description>Recent content in 언어 on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Jan 2024 15:44:56 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/categories/%EC%96%B8%EC%96%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Asyncio Cancellation</title>
      <link>https://chankoo.github.io/posts/asyncio-cancellation/</link>
      <pubDate>Thu, 25 Jan 2024 15:44:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asyncio-cancellation/</guid>
      <description>
        
          
            코루틴이 외부 요인에 의해 중단되었음을 의미
모든 await 구문에서 아무때나 발생 가능하다. CancelledError 예외가 발생하게되며, 예외 처리를 통해 clean-up 해야한다. clean-up 작업이 까다로운데, 제대로 처리하지 못하면 예기치 못한 문제(취소된 작업이 db 커넥션을 물고 있다거나)를 야기한다.
명시적으로 Cancellation을 발생시키려면,
코루틴에 asyncio.CancelledError 를 throw 하거나(실제 코드에선 잘 안쓰임) 퓨처 또는 태스크 객체의 .cancel() 을 호출하거나 raise asyncio.CancelledError 를 통해 스스로 작업을 취소 import asyncio async def f(): try: while True: await asyncio.sleep(0) # cancellable 하게 만드는 asyncio.
          
          
        
      </description>
    </item>
    
    <item>
      <title>전문가를 위한 파이썬</title>
      <link>https://chankoo.github.io/posts/%EC%A0%84%EB%AC%B8%EA%B0%80%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC/</link>
      <pubDate>Tue, 23 Jan 2024 17:17:59 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%A0%84%EB%AC%B8%EA%B0%80%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%8C%EC%9D%B4%EC%8D%AC/</guid>
      <description>
        
          
            refs Fluent Python Chapter 1. 파이썬 데이터 모델 (Feat. 일관성 있는 언어) links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Call by Sharing</title>
      <link>https://chankoo.github.io/posts/call-by-sharing/</link>
      <pubDate>Tue, 23 Jan 2024 17:13:57 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/call-by-sharing/</guid>
      <description>
        
          
            인자의 레퍼런스(또는 포인터)를 복사해서 사용하는 함수 호출 방식이다.
파이썬에서는 모든 타입을 Call by Sharing으로 전달한다. print_arg를 실행하면 인자로 전달된 객체의 레퍼런스 카운트가 증가(2 -&amp;gt; 4)함을 확인할 수 있다.
// python import sys def print_arg(arg): print(id(arg), sys.getrefcount(arg)) a = 9999 print(id(a), sys.getrefcount(a)) # 4416168912 2 print_arg(a) # 4416168912 4 b = [1,2,3] print(id(b), sys.getrefcount(b)) # 4416560768 2 print_arg(b) # 4416560768 4 js 에서는 참조 타입을 인자로 전달할때 사용된다(원시 타입은 Call by value로 동작).
          
          
        
      </description>
    </item>
    
    <item>
      <title>레퍼런스</title>
      <link>https://chankoo.github.io/posts/%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4/</link>
      <pubDate>Tue, 23 Jan 2024 13:49:42 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4/</guid>
      <description>
        
          
            언어마다 구현의 차이는 있지만, &amp;lsquo;메모리에 저장된 실제 데이터를 가리키는 변수&amp;rsquo; 를 의미힌다.
파이썬에서 레퍼런스는 객체를 가리키는 변수이다. 해당 객체가 레퍼런스 카운팅을 통해 레퍼런스를 관리한다. 레퍼런스는 스택 영역에, 객체는 힙 영역에 각각 저장한다. 할당되는 순간(x = 9999999999), 레퍼런스가 힙 영역의 객체를 가리키며 객체의 레퍼런스 카운트를 증가시킨다. 다른 레퍼런스를 선언하고 기존 레퍼런스를 할당(y = x)해도 같은 일이 발생한다. 새로 만든 레퍼런스는 기존 레퍼런스가 가리키던 객체를 가리키게 되고(y -&amp;gt; 9999999999), 기존 객체의 레퍼런스 카운트가 증가한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Using Asyncio in Python</title>
      <link>https://chankoo.github.io/posts/using-asyncio-in-python/</link>
      <pubDate>Sat, 20 Jan 2024 18:37:07 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/using-asyncio-in-python/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Asyncio</title>
      <link>https://chankoo.github.io/posts/asyncio/</link>
      <pubDate>Sat, 20 Jan 2024 13:30:38 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asyncio/</guid>
      <description>
        
          
            async / await 문을 이용해 비동기 프로그래밍을 구현하는 파이썬 라이브러리이다.
IO 작업에 async 기반 동시성은
스레드 기반 동시성 보다 안전한 선점 스케줄링을 구현하면서 가볍다. 많은 자원이 아니라 단순히 시간이 필요한 IO 작업에 적합하다. 멀티 스레딩 코드보다 제어권 변동을 명시적으로 표현(await)하여 코드 레벨에서 관측 가능하다. 사용자 관점에서 주요한 요소들을 알아보자.
asyncio.run() 코루틴 체인의 최상위 진입점으로, 코루틴 내 코루틴들을 모두 실행한다. 이벤트 루프 생성, 태스크 실행, 보류 태스크 취소, 이벤트 루프 소멸까지 한번에 작업한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Awaitable 객체</title>
      <link>https://chankoo.github.io/posts/awaitable-%EA%B0%9D%EC%B2%B4/</link>
      <pubDate>Thu, 07 Dec 2023 14:11:07 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/awaitable-%EA%B0%9D%EC%B2%B4/</guid>
      <description>
        
          
            await 키워드로 실행하는 코루틴, 퓨처, 태스크를 의미한다.
awaitable 객체는 다음과 같이 정의한다.
코루틴 이거나 이터레이터를 반환하는 _await_() 메소드를 구현한 객체 퓨처는 이벤트 루프와 상호작용하는 객체로 작업 실행 상태와 결과를 저장한다.
상태는 1) PENDING, 2) CANCELLED, 3) FINISHED 의 세가지이며, CANCELLED 와 FINISHED는 완료 상태이다 결과 값을 저장(.set_result(value))하고 가져올(.result()) 수 있다. 실행 중 취소(.cancel()) 할 수 있다. .add_done_callback() 으로 완료 후 호출할 콜백을 등록할 수 있다. 태스크는 퓨처의 서브클래스로 퓨처 인터페이스에 더해 코루틴과 상호작용하는 역할을 한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>콜백 함수</title>
      <link>https://chankoo.github.io/posts/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98/</link>
      <pubDate>Thu, 30 Nov 2023 16:18:53 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98/</guid>
      <description>
        
          
            인자로 다른 함수에게 전달되는 함수.
refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Active Record</title>
      <link>https://chankoo.github.io/posts/active-record/</link>
      <pubDate>Wed, 22 Nov 2023 23:08:32 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/active-record/</guid>
      <description>
        
          
            content DB row의 wrapper 객체로 데이터에 대한 접근과 도메인 로직을 함께 구현하는 방식이다.
Django Model이 Active Record를 사용한다.
refs P of EAA: Active Record links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Client-side Navigation</title>
      <link>https://chankoo.github.io/posts/client-side-navigation/</link>
      <pubDate>Wed, 08 Nov 2023 10:00:42 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/client-side-navigation/</guid>
      <description>
        
          
            Next.js 의 페이지 간 이동을 client-side에서 처리하는 것을 의미한다
a 태그를 사용한 전통적인 라우팅과 달리, full page reload 를 (당연히) 하지 않고, 링크가 있으면 prefetching 하여 필요한 데이터(js 파일)를 미리 받아오며, 자체적으로 code splitting과 cache, partial-rendering 을 통해 사용성을 높이는 이점이 있다.
refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>리액티브 프로그래밍</title>
      <link>https://chankoo.github.io/posts/%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link>
      <pubDate>Thu, 01 Jun 2023 16:39:03 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%A6%AC%EC%95%A1%ED%8B%B0%EB%B8%8C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</guid>
      <description>
        
          
            content 데이터 스트림에 영향을 미치는 모든 변경 사항을 observer 들에게 전파하는 프로그래밍
리액티브 매니페스토
반응성(responsive) : 리액티브 시스템은 빠를 뿐 아니라 + 일정하고 예상가능한 반응 시간을 제공한다. 회복성(resilient) : 장애가 발생해도 시스템은 반응해야한다. 여러 컴포넌트의 시간과 공간 분리 (즉, 컴포넌트가 각각 독립적인 생명주기를 갖고 다른 프로세스에서 실행), 작업 위임시 비동기적으로 위임하는 등의 기법이 있다. 탄력성(elastic) : 애플리케이션의 생명주기 동안 다양한 부하를 받는데 이때 리액티브 시스템에서는 자동으로 관련 컴포넌트에 할당된 자원 수를 늘린다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>파이썬 디스크립터</title>
      <link>https://chankoo.github.io/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0/</link>
      <pubDate>Thu, 20 Oct 2022 21:18:18 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0/</guid>
      <description>
        
          
            매직 메서드 get, set, delete 중 하나 이상을 정의한 객체를 의미하며, 클래스 변수에 저장한 객체(디스크립터 객체)의 어트리뷰트를 제어하는 기능을 한다. 즉, 디스크립터를 이용하면 객체 어트리뷰트의 lookup, storage, and deletion을 커스터마이징할 수 있다.
보통 인스턴스 데이터에 대한 접근을 관리하는 용도로 쓰인다. ex) django.models.fields.FileField 의 FileDescriptor -&amp;gt; FileField를 가져올때 항상 FieldFile을 내놓도록 제어
refs [Chapter .06] 디스크립터로 더 멋진 객체 만들기 - 파이썬 틀린코드 (Feat. 파이썬 클린코드) [Python] 디스크립터(Descriptor) links FileField 
          
          
        
      </description>
    </item>
    
    <item>
      <title>FileField</title>
      <link>https://chankoo.github.io/posts/filefield/</link>
      <pubDate>Thu, 20 Oct 2022 19:25:34 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/filefield/</guid>
      <description>
        
          
            업로드한 파일을 위한 Django Field 객체로 DB 테이블의 컬럼을 추상화했다. 파일을 추상화한 FieldFile 객체의 wrapper이다. 생성을 위해 파일 시스템을 추상화한 Storage 의 구현체와 path로 지정할 문자열(upload_to)가 필요하다.
FileField 를 get 하면 항상 FieldFile 객체를 가져오는데, 이는 파이썬의 디스크립터를 이용하여 기능한다. FileField에 descriptor_class로 FileDescriptor 객체가 선언되어있어서, FileField 를 가져올때 Dynamic lookup 을 통해 FieldFile을 내어놓는 것이다.
refs Model field reference | Django documentation | Django links 파일 시스템 파이썬 디스크립터 
          
          
        
      </description>
    </item>
    
    <item>
      <title>생성자</title>
      <link>https://chankoo.github.io/posts/%EC%83%9D%EC%84%B1%EC%9E%90/</link>
      <pubDate>Wed, 12 Oct 2022 11:19:58 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%83%9D%EC%84%B1%EC%9E%90/</guid>
      <description>
        
          
            객체를 초기화하고, 멤버 변수를 할당하여 객체를 (개념적으로)생성하는 서브루틴.
python의 예를 들면, python 객체는 new 를 통해 메모리에 할당되며, init 을 통해 멤버 변수를 정의한다. (개념적인) 객체의 생성이 init 을 통해 이루어졌으므로, init 이 python의 생성자라 할 수 있다.
refs Constructor (object-oriented programming) - Wikipedia Object lifetime - Wikipedia Python: __init__() is not the only constructor - DEV Community links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>ASGI</title>
      <link>https://chankoo.github.io/posts/asgi/</link>
      <pubDate>Tue, 11 Oct 2022 21:00:21 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asgi/</guid>
      <description>
        
          
            Asynchronous Server Gateway Interface. 파이썬 웹 애플리케이션과 웹 서버의 공통 인터페이스를 기술한 프로토콜.
WSGI 처럼, 프로토콜 서버 내 앱들에게 표준화된 요청/응답을 주고받는 방식이나, ASGI는 비동기 방식으로 이벤트를 주고 받는 구조적인 차이가 있다.
refs ASGI (Asynchronous Server Gateway Interface) Specification — ASGI 3.0 documentation &amp;ldquo;파이썬 웹 개발의 미래&amp;rdquo; ASGI의 개념과 활용 방법 - ITWorld Korea links WSGI 
          
          
        
      </description>
    </item>
    
    <item>
      <title>WSGI</title>
      <link>https://chankoo.github.io/posts/wsgi/</link>
      <pubDate>Tue, 11 Oct 2022 21:00:21 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/wsgi/</guid>
      <description>
        
          
            WSGI(Web Server Gateway Interface) 는 파이썬 웹앱과 웹서버 간 통신 인터페이스 명세이다.
refs links ASGI gunicorn 
          
          
        
      </description>
    </item>
    
    <item>
      <title>dis</title>
      <link>https://chankoo.github.io/posts/dis/</link>
      <pubDate>Sun, 09 Oct 2022 22:02:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dis/</guid>
      <description>
        
          
            파이썬 바이트코드 역 어셈블러. CPython의 바이트 코드를 역 어셈블하여 바이트 코드 레벨의 분석을 돕는 모듈이다.
ex)
def hi(x): x += 1 print(x) return x 위 정의에 따르면, 추상화한 바이트코드를 바이트코드로 바꾸는 것도 어셈블이라 볼 수 있다.
refs dis &amp;mdash; 파이썬 바이트 코드 역 어셈블러 — 파이썬 설명서 주석판 links Bytecode Assembler 
          
          
        
      </description>
    </item>
    
    <item>
      <title>UseEffect</title>
      <link>https://chankoo.github.io/posts/useeffect/</link>
      <pubDate>Thu, 06 Oct 2022 13:18:27 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/useeffect/</guid>
      <description>
        
          
            함수형 컴포넌트에서 이펙트를 정의하는 훅. 렌더링 후 리액트가 내부의 함수를 실행한다. 리액트는 각 렌더링 마다 deps 배열을 비교하여 이펙트 내 함수 실행 여부를 따진다.
refs links 함수형 컴포넌트 
          
          
        
      </description>
    </item>
    
    <item>
      <title>함수형 컴포넌트</title>
      <link>https://chankoo.github.io/posts/%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</link>
      <pubDate>Thu, 06 Oct 2022 01:40:37 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</guid>
      <description>
        
          
            react의 함수형 컴포넌트는 당연하게도 함수형 프로그래밍의 패러다임을 따른다. 컴포넌트 내 state는 불변하며, setState는 새 state로 컴포넌트 함수를 다시 호출한다. 그때마다 다시 렌더링되는 것이고 각 렌더링은 고유의 함수(핸들러, 이펙트)를 가진다.
refs useEffect 완벽 가이드 — Overreacted links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>numpy array</title>
      <link>https://chankoo.github.io/posts/numpy-array/</link>
      <pubDate>Mon, 03 Oct 2022 16:17:54 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/numpy-array/</guid>
      <description>
        
          
            파이썬의 list 보다 np array가
더 빠르다 element로 PyObject 대신 value를 들고 있어 직접 접근할 수 있다. 메모리 효율이 좋다. element의 크기가 작다 PyObject - 4 for type pointer, 4 for reference count, 4 for value &amp;ndash; and the memory allocators rounds up to 16 value - single-precision numbers takes 4 bytes each, double-precision ones, 8 bytes 동적배열 아니어서 크기가 고정이며 정적할당하여 element 타입이 고정이다 refs links PyObject Dynamic Array 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python-GC</title>
      <link>https://chankoo.github.io/posts/python-gc/</link>
      <pubDate>Mon, 03 Oct 2022 16:08:52 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/python-gc/</guid>
      <description>
        
          
            파이썬(CPython)에서는 아래 두가지 객체에 대해 가비지 컬렉션을 실행한다.
PyObject의 ref count가 0
순환 참조가 발생했고 그 외의 참조는 없음
예제 l = [] l.append(l) del l refs Python GC가 작동하는 원리 links 가비지 컬렉션 PyObject 
          
          
        
      </description>
    </item>
    
    <item>
      <title>GIL</title>
      <link>https://chankoo.github.io/posts/gil/</link>
      <pubDate>Mon, 03 Oct 2022 15:57:13 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gil/</guid>
      <description>
        
          
            파이썬 객체의 레퍼런스 카운팅이 정상적으로 동작하도록, 인터프리터의 동작을 전역적으로 통제하는 락. 여러 스레드가 한 객체의 레퍼런스 카운트를 조작하는 동시성 을 제어하기위해, GIL 을 가진 스레드만 자원을 통제할 수 있다.
더 구체적으로 말하면, 멀티 스레딩 환경에서 각 스레드는 레퍼런스 카운팅을 위해 PyObject 의 ob_refcnt를 조작하는데, 이는 race condition이다. race condition 해결을 위해 일반적인 mutex 를 사용하자니 각 객체 마다 락이 필요하고, deadlock 의 리스크도 존재한다. 그래서 파이썬(CPython)은 GIL을 통해 인터프리터 자체를 잠가버렸다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>PyObject</title>
      <link>https://chankoo.github.io/posts/pyobject/</link>
      <pubDate>Mon, 03 Oct 2022 15:37:15 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/pyobject/</guid>
      <description>
        
          
            일반적인 CPython 구현체를 가정했을때, 파이썬의 메모리 관리 알고리즘은 C로 쓰여졌고, 이해를 위해서는 CPython 의 내부 구현을 알아야한다.
모든 파이썬 객체는 PyObject라는 c struct 를 확장하여 가지고 있다.
ob_type 은 해당 객체의 타입 오브젝트(PyTypeObject)를 가리키는 포인터이다. PyTypeObject 역시 c struct 이며 특정 타입(int, dict 등)에 대한 메타 데이터를 가진다. ob_refcnt 는 객체를 참조하는 레퍼런스의 수를 저장한다. refs Memory Management in Python – Real Python links CPython 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Cython</title>
      <link>https://chankoo.github.io/posts/cython/</link>
      <pubDate>Mon, 03 Oct 2022 13:54:50 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cython/</guid>
      <description>
        
          
            Cython: C-Extension for Python C로 파이썬의 확장 모듈을 구현하기 위해 설계한 컴파일 언어. C와 파이썬의 superset이며 표준 C/C++ 컴파일러를 이용한다. 이러한 특성은 파이썬 언어의 높은 생산성을 활용하면서 실행 속도의 향상을 가져온다.
refs 사이썬 - 위키백과, 우리 모두의 백과사전 links CPython 컴파일러 
          
          
        
      </description>
    </item>
    
    <item>
      <title>CPython</title>
      <link>https://chankoo.github.io/posts/cpython/</link>
      <pubDate>Mon, 03 Oct 2022 13:40:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cpython/</guid>
      <description>
        
          
            C로 구현한 파이썬 인터프리터 시스템. 파이썬 언어로 쓰인 스크립트를 바이트코드(.pyc, pycache)로 컴파일한 후, 가상 머신에서 인터프리터로 실행한다.
&amp;lsquo;파이썬은 인터프리터 언어다&amp;rsquo;는 말은 반은 맞고 반은 틀리다. 전체 코드를 바이트코드로 컴파일하는 과정을 거치기 때문이다. 인터프리터는 컴파일한 언어를 가상머신 위에서 한줄한줄 실행한다. 물론 이건 CPython 기준이고, 구현체에 따라 실행 과정은 달라진다(Pypy, Jython 등)
개발 환경에서는 바이트코드 파일을 생성하는게 귀찮을 때가 있다. 다행히도 바이트 코드 컴파일 과정은 매우 빠르므로, PYTHONDONTWRITEBYTECODE 1 설정을 통해 파일을 저장하지 않도록 할 수 있다.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
