<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>언어 on </title>
    <link>https://chankoo.github.io/categories/%EC%96%B8%EC%96%B4/</link>
    <description>Recent content in 언어 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Thu, 30 Nov 2023 16:18:53 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/categories/%EC%96%B8%EC%96%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>콜백 함수</title>
      <link>https://chankoo.github.io/posts/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98/</link>
      <pubDate>Thu, 30 Nov 2023 16:18:53 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98/</guid>
      <description>
        
          
            content 인자로 다른 함수에게 전달되는 함수.
refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Active Record</title>
      <link>https://chankoo.github.io/posts/active-record/</link>
      <pubDate>Wed, 22 Nov 2023 23:08:32 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/active-record/</guid>
      <description>
        
          
            content DB row의 wrapper 객체로 데이터에 대한 접근과 도메인 로직을 함께 구현해놓는 방식이다.
refs P of EAA: Active Record Fetching Title#kql4 links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>dis</title>
      <link>https://chankoo.github.io/posts/dis/</link>
      <pubDate>Sun, 09 Oct 2022 22:02:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dis/</guid>
      <description>
        
          
            content 파이썬 바이트코드 역 어셈블러. CPython의 바이트 코드를 역 어셈블하여 바이트 코드 레벨의 분석을 돕는 모듈이다.
ex)
def hi(x): x += 1 print(x) return x 위 정의에 따르면, 추상화한 바이트코드를 바이트코드로 바꾸는 것도 어셈블이라 볼 수 있다.
refs dis &amp;mdash; 파이썬 바이트 코드 역 어셈블러 — 파이썬 설명서 주석판 links Bytecode Assembler 
          
          
        
      </description>
    </item>
    
    <item>
      <title>UseEffect</title>
      <link>https://chankoo.github.io/posts/useeffect/</link>
      <pubDate>Thu, 06 Oct 2022 13:18:27 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/useeffect/</guid>
      <description>
        
          
            content 함수형 컴포넌트에서 이펙트를 정의하는 훅. 렌더링 후 리액트가 내부의 함수를 실행한다. 리액트는 각 렌더링 마다 deps 배열을 비교하여 이펙트 내 함수 실행 여부를 따진다.
refs links 함수형 컴포넌트 
          
          
        
      </description>
    </item>
    
    <item>
      <title>함수형 컴포넌트</title>
      <link>https://chankoo.github.io/posts/%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</link>
      <pubDate>Thu, 06 Oct 2022 01:40:37 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</guid>
      <description>
        
          
            content react의 함수형 컴포넌트는 당연하게도 함수형 프로그래밍의 패러다임을 따른다. 컴포넌트 내 state는 불변하며, setState는 새 state로 컴포넌트 함수를 다시 호출한다. 그때마다 다시 렌더링되는 것이고 각 렌더링은 고유의 함수(핸들러, 이펙트)를 가진다.
refs useEffect 완벽 가이드 — Overreacted links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>why numpy array</title>
      <link>https://chankoo.github.io/posts/why-numpy-array/</link>
      <pubDate>Mon, 03 Oct 2022 16:17:54 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/why-numpy-array/</guid>
      <description>
        
          
            content 파이썬의 list 보다 np array가
더 빠르다 element로 PyObject 대신 value를 들고 있어 직접 접근할 수 있다. 메모리 효율이 좋다. element의 크기가 작다 PyObject - 4 for type pointer, 4 for reference count, 4 for value &amp;ndash; and the memory allocators rounds up to 16 value - single-precision numbers takes 4 bytes each, double-precision ones, 8 bytes 동적배열 아니어서 크기가 고정이며 정적할당하여 element 타입이 고정이다 refs links PyObject Dynamic Array 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python-GC</title>
      <link>https://chankoo.github.io/posts/python-gc/</link>
      <pubDate>Mon, 03 Oct 2022 16:08:52 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/python-gc/</guid>
      <description>
        
          
            content 파이썬(CPython)에서는 아래 두가지 객체에 대해 가비지 컬렉션을 실행한다.
PyObject의 ref count가 0
순환 참조가 발생했고 그 외의 참조는 없음
예제
l = [] l.append(l) del l refs Python GC가 작동하는 원리 links 가비지 컬렉션 PyObject 
          
          
        
      </description>
    </item>
    
    <item>
      <title>PyObject</title>
      <link>https://chankoo.github.io/posts/pyobject/</link>
      <pubDate>Mon, 03 Oct 2022 15:37:15 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/pyobject/</guid>
      <description>
        
          
            content 일반적인 CPython 구현체를 가정했을때, 파이썬의 메모리 관리 알고리즘은 C로 쓰여졌고, 이해를 위해서는 CPython 의 내부 구현을 알아야한다.
모든 파이썬 객체는 PyObject라는 c struct 를 확장하여 가지고 있다. PyObject는 ob_type 포인터 객체의 타입 오브젝트를 가리키고, ob_refcnt를 통해 레퍼런스 카운팅을 한다.
refs Memory Management in Python – Real Python links CPython 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Cython</title>
      <link>https://chankoo.github.io/posts/cython/</link>
      <pubDate>Mon, 03 Oct 2022 13:54:50 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cython/</guid>
      <description>
        
          
            content Cython: C-Extension for Python C로 파이썬의 확장 모듈을 구현하기 위해 설계한 컴파일 언어. C와 파이썬의 superset이며 표준 C/C++ 컴파일러를 이용한다. 이러한 특성은 파이썬 언어의 높은 생산성을 활용하면서 실행 속도의 향상을 가져온다.
refs 사이썬 - 위키백과, 우리 모두의 백과사전 links CPython 컴파일러 
          
          
        
      </description>
    </item>
    
    <item>
      <title>CPython</title>
      <link>https://chankoo.github.io/posts/cpython/</link>
      <pubDate>Mon, 03 Oct 2022 13:40:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cpython/</guid>
      <description>
        
          
            content C로 구현한 파이썬 인터프리터 시스템. 파이썬 언어로 쓰인 스크립트를 바이트코드(.pyc, pycache)로 컴파일한 후, 인터프리터로 실행한다.
refs CPython 파헤치기: 따라 하면서 이해하는 파이썬 내부의 동작 원리 – 도서출판 인사이트 links 인터프리터 Bytecode 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
