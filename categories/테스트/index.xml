<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>테스트 on chankoo</title>
    <link>https://chankoo.github.io/categories/%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
    <description>Recent content in 테스트 on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 09 Jan 2024 17:33:48 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/categories/%ED%85%8C%EC%8A%A4%ED%8A%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>테스트 픽스처</title>
      <link>https://chankoo.github.io/posts/%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%BD%EC%8A%A4%EC%B2%98/</link>
      <pubDate>Tue, 09 Jan 2024 17:33:48 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%BD%EC%8A%A4%EC%B2%98/</guid>
      <description>
        
          
            테스트 실행을 위해 필요한 초기 상태로, 객체와 환경 등 모든 것의 고정된 상태를 의미한다. 예를 들어 테스트에 db 객체가 필요하다면, 필요한 모든 데이터가 로딩 된 db 객체를 픽스처로 만들어두어야 한다.
테스트 더블과 헷갈릴 수 있는데, 더블은 테스트 수행 중에 실제 구현을 대신하여 동작하는 구현을 의미한다. 반면에 픽스처는 테스트 수행을 위해 고정되어야할 환경으로 그 의미가 전혀 다르다. 같은 객체가 더블이면서 픽스처인 경우가 있어(ex. 픽스처로 세팅된 db Mock) 혼동이 오는데, 그 목적이 달라 사용하는 맥락에 따라 구분해야한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>테스트 피라미드</title>
      <link>https://chankoo.github.io/posts/%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C/</link>
      <pubDate>Tue, 27 Dec 2022 09:07:45 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%94%BC%EB%9D%BC%EB%AF%B8%EB%93%9C/</guid>
      <description>
        
          
            빠르고 확실하고 저렴한 테스트를 많이 수행해야한다. refs 마이크로서비스 패턴 links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Mock과 Fake</title>
      <link>https://chankoo.github.io/posts/mock%EA%B3%BC-fake/</link>
      <pubDate>Fri, 16 Dec 2022 17:01:16 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/mock%EA%B3%BC-fake/</guid>
      <description>
        
          
            content mockist vs classicist
mockist(aka 런던 학파) - 단위 테스트에 실제 의존성 사용을 피하고, 목과 스텁을 이용해서 요소가 어떻게 상호작용하는지를 테스트해야 한다고 주장 classicis(aka 디트로이트 학파) - 실제 의존성을 테스트하는 것을 최우선으로 두어서, 목과 스텁 보단 페이크를 사용하여 실행 코드의 최종 결과가 무엇인지 확인해야 한다고 주장 refs 좋은 코드 나쁜 코드 Mocks Aren&amp;rsquo;t Stubs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>테스트 더블</title>
      <link>https://chankoo.github.io/posts/%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%B8%94/</link>
      <pubDate>Fri, 16 Dec 2022 16:41:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%B8%94/</guid>
      <description>
        
          
            테스트할 객체가 의존하는 요소들이 실제 동작하는 것처럼 보이도록 별도로 생성한 가짜 객체이다.
이렇게 테스트 더블을 생성하여 진행하는 테스트를 고립(Solitary) 테스트라 부른다. 해당 객체가 의존하는 다른 요소들은 테스트하지 않는 방식이다.
테스트 더블의 종류
Dummy 아무런 기능이 없는 객체로 인터페이스만 필요할때 쓰인다. Fake 동작하지만, 실제와 다른 방식으로 구현된 객체이다. ex) DB 객체를 Hashmap으로 구현 Stub 동작하는 것처럼 만든 더미로 미리 지정된 데이터를 돌려주는 객체이다. Spy Stub으로 기능하면서 부가적인 정보를 기록하는 객체이다. Mock 실제와 같은 구현으로 동작하는 객체이다.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
