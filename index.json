[{"body":"","link":"https://chankoo.github.io/","section":"","tags":null,"title":""},{"body":"","link":"https://chankoo.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://chankoo.github.io/posts/","section":"posts","tags":null,"title":"Posts"},{"body":"content 분산 시스템의 ID 생성 목적으로 트위터가 고안한 자료구조. 크기가 작고(8바이트) 특정 기술에 의존하지 않아 대용량 분산 시스템의 요구사항을 잘 만족시킨다.\ntimestamp - 약 70년의 timestamp를 표현 가능. 생성 순으로 정렬 가능 instance - 장비의 고유 ID로 사용 seqence - 동일한 ms에 생성한 id에 순번을 매김. 즉, ms 마다 4097(2^12)개 id 생성 가능 refs Snowflake ID - Wikipedia 가상 면접 사례로 배우는 대규모 시스템 설계 기초 분산 처리 시스템에서 유일한 식별자를 만드는 방법(twitter snowflake) links ","link":"https://chankoo.github.io/posts/snowflake-id/","section":"posts","tags":["분산시스템"],"title":"Snowflake ID"},{"body":"","link":"https://chankoo.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://chankoo.github.io/tags/%EB%B6%84%EC%82%B0%EC%8B%9C%EC%8A%A4%ED%85%9C/","section":"tags","tags":null,"title":"분산시스템"},{"body":"","link":"https://chankoo.github.io/categories/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/","section":"categories","tags":null,"title":"자료구조"},{"body":"","link":"https://chankoo.github.io/tags/http/","section":"tags","tags":null,"title":"http"},{"body":"","link":"https://chankoo.github.io/tags/tcp/","section":"tags","tags":null,"title":"TCP"},{"body":"","link":"https://chankoo.github.io/categories/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/","section":"categories","tags":null,"title":"네트워크"},{"body":"content HTTP2에서 스트림은 하나의 TCP 커넥션 내 존재하는 다수의 가상 TCP 소켓이다. 클라이언트와 서버는 스트림을 기준으로 양방향 통신하여, 스트림은 요청과 응답 메시지를 묶는 단위가 된다. HTTP1.1 까지 요청과 응답은 하나의 메시지 단위로만 이뤄졌는데, HTTP2 부터는 여러개의 요청/응답 메시지를 연속적(스트림 단위)으로 전달하는 것이다.\n스트림은 한개 이상의 요청/응답 메시지로 구성되며, 메시지는 프레임이라는 단위로 나뉜다. 프레임은 HTTP2 통신상 가장 작은 정보 단위이며 Header 이거나 Data이다.\nrefs 리얼월드 HTTP HTTP/2에서 Frame, Stream의 의미 links HTTP2 TCP 소켓 ","link":"https://chankoo.github.io/posts/%EC%8A%A4%ED%8A%B8%EB%A6%BC/","section":"posts","tags":["http","TCP"],"title":"스트림"},{"body":"content 구글에서 개발한 직렬화 데이터 구조. JSON과 같은 기존 포맷보다 작고 직렬화/역직렬화 속도가 빠르다.\n데이터 타입을 정의한 Proto file을 (해당 언어에 맞게) 컴파일하여 사용한다. 최초 1바이트(두자리 16진수)로 필드 넘버와 타입을 표현하고, 차례로 length와 데이터를 표현한다.\nmessage Person { string name = 1; // 필드 타입 string, 필드 넘버 1 int32 age = 2; } refs 프로토콜 버퍼란 무엇인가(Protocol Buffer) 서버, 클라이언트 예제와 함께 feat. express \u0026amp; Vue 구글 프로토콜 버퍼 (Protocol buffer) Language Guide (proto 2) | Protocol Buffers Documentation links Marshalling ","link":"https://chankoo.github.io/posts/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%B2%84%ED%8D%BC/","section":"posts","tags":null,"title":"프로토콜 버퍼"},{"body":"content Transmission Control Protocol. TCP/IP 스택 전송 계층 프로토콜로 소켓 간 신뢰할 수 있는 통신을 보장한다.\n프로세스와 프로세스(엄밀히는 소켓과 소켓)를 잇는 논리적인 개념의 point-to-point 통신 reliable: 응용계층에서 받은 데이터의 error와 loss가 없음을 보장 in-order byte stream: 데이터의 순서를 유지 Pipelined : window size 단위로 패킷을 묶어 통신 send \u0026amp; receive buffers: 송신 측과 수신 측 모두 send, receive buffer를 각각 가짐 Full duplex: 통신하는 host 양쪽 모두가 데이터 전송 가능 Connection oriented: handshake를 먼저 수행한 후 통신. handshake에서 window size, buffer, seq number와 같은 정보를 교환함 Flow control Congetion control refs TCP.md reliable_data_transfer.md links 소켓 ","link":"https://chankoo.github.io/posts/tcp/","section":"posts","tags":["TCP"],"title":"TCP"},{"body":"content 해시 테이블에 저장한 데이터 개수 n을 버킷의 개수 k로 나눈 것(n/k)\n로드 팩터가 높을수록 해시 테이블의 성능이 감소한다. 같은 버킷을 쓰는 데이터가 많아져 해시 테이블에서 탐색하는 시간이 늘어나기 때문이다.\n따라서 언어별로 해시 테이블을 구현할때 로드 팩터의 임계치를 두고있으며, 임계치를 넘어설때 버킷의 수를 늘려 리해싱한다. (동적 배열의 메모리 재할당과 유사)\nrefs links 해시 테이블 해시 충돌 Dynamic Array ","link":"https://chankoo.github.io/posts/%EB%A1%9C%EB%93%9C-%ED%8C%A9%ED%84%B0/","section":"posts","tags":null,"title":"로드 팩터"},{"body":"","link":"https://chankoo.github.io/categories/%EC%96%B8%EC%96%B4/","section":"categories","tags":null,"title":"언어"},{"body":"content 인자로 다른 함수에게 전달되는 함수.\nrefs links ","link":"https://chankoo.github.io/posts/%EC%BD%9C%EB%B0%B1-%ED%95%A8%EC%88%98/","section":"posts","tags":null,"title":"콜백 함수"},{"body":"","link":"https://chankoo.github.io/categories/os/","section":"categories","tags":null,"title":"OS"},{"body":"","link":"https://chankoo.github.io/tags/%EB%8F%99%EC%8B%9C%EC%84%B1/","section":"tags","tags":null,"title":"동시성"},{"body":"content OS가 CPU를 프로세스에게 할당하는 정책이다.\n선점형 vs 비선점형(협력적) 자원을 점유하는 프로세스를 중지하고 강제로 자원을 가져가는 선점형 자원을 점유하는 프로세스가 종료되거나, I/O 발생하여 대기 할때까지 기다리는 비선점형 정적 vs 동적 프로세스에 부여된 우선순위가 고정 vs 유동 refs 스케줄링 (컴퓨팅) - 위키백과, 우리 모두의 백과사전 백엔드 개발자들이 알아야할 동시성 4 — 스케줄링. 지난 포스팅에선 많은 쓰레드와 잦은 컨텍스트 스위칭이 어떻게 웹서버의… | by Choi Geonu | Medium links ","link":"https://chankoo.github.io/posts/%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/","section":"posts","tags":["동시성"],"title":"스케줄링"},{"body":"content Continuation Passing Style. 말그대로 Continuation을 전달하는 방식으로 프로그래밍하는 것을 말한다.\n이는 CPS 함수를 정의할 때 특정한 작업(ex. 콜백 함수) 을 명시적 인자로 받게되는데, CPS 함수는 해당 함수의 작업이 끝난 후 인자로 받은 작업을 수행하게 된다. Continuation이 CPS 함수에 있다가 인자로 받은 작업으로 넘어가는 것이다.\nCPS가 아니라면 함수가 그냥(암묵적으로) 작업을 수행하며, Continuation은 해당 함수에 머무른다.\nrefs Continuation-passing style - Wikipedia 백엔드 개발자들이 알아야할 동시성 5 — Continuation Passing Style | by Choi Geonu | Medium Continuation-Passing Style. CPS 이해하기 | by Ji Sungbin | Medium links 스케줄링 Event Loop 콜백 함수 ","link":"https://chankoo.github.io/posts/cps/","section":"posts","tags":["동시성","함수형프로그래밍"],"title":"CPS"},{"body":"","link":"https://chankoo.github.io/tags/%ED%95%A8%EC%88%98%ED%98%95%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/","section":"tags","tags":null,"title":"함수형프로그래밍"},{"body":"","link":"https://chankoo.github.io/tags/cache/","section":"tags","tags":null,"title":"cache"},{"body":"content 리소스의 캐시 여부를 지정하는 http 응답/요청 헤더. Cache-Control에 부여한 directive에 따라 캐시 사용 전략이 결정된다. Etag나 bfcache 등이 모두 영향받는다.\nrefs Cache-Control - HTTP | MDN 프론트엔드 개발자가 알아야 할 ‘캐싱’ 개념 정리 | 요즘IT links Etag bfcache ","link":"https://chankoo.github.io/posts/cache-control/","section":"posts","tags":["cache","http","브라우저"],"title":"Cache-Control"},{"body":"","link":"https://chankoo.github.io/tags/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80/","section":"tags","tags":null,"title":"브라우저"},{"body":"content Cross-Origin Resource Sharing. 출처가 다른(Cross-Origin) 요청에 대해 리소스를 내려 줄 것인지 판단하는 정책이다.\n요청 헤더 Origin에 출처가 담긴다. 스킴, 도메인, 포트 중 하나라도 다르면 Cross-Origin으로 본다. 응답 헤더 Access-Control-Allow-Origin에 허용된 출처가 담긴다. 브라우저가 Origin, Access-Control-Allow-Origin 그리고 요청 시나리오를 고려하여 CORS 위반 여부를 판단한다. refs CORS는 왜 이렇게 우리를 힘들게 하는걸까? | Evans Library links ","link":"https://chankoo.github.io/posts/cors/","section":"posts","tags":["web","http","브라우저"],"title":"CORS"},{"body":"","link":"https://chankoo.github.io/tags/web/","section":"tags","tags":null,"title":"web"},{"body":"","link":"https://chankoo.github.io/categories/%EB%B3%B4%EC%95%88/","section":"categories","tags":null,"title":"보안"},{"body":"content Dynamic Host Configuration Protocol. 네트워크에 연결된 장치들에게 IP 주소와 기타 매개변수(네임서버 주소, 게이트웨이 주소 등)를 자동으로 할당하는 IP 네트워크 레벨의 프로토콜.\n서버(보통은 공유기)와 클라이언트로 나뉘는데, DHCP 서버는 서브넷에서 사용가능한 네트워크 자원을 일정 기간 클라이언트에 임대하는 역할을 수행한다. 서버가 중앙 집중식으로 관리하기에 클라이언트 간 충돌 없이 네트워크 자원을 분배할 수 있다.\nrefs 🌐 DHCP 이란 무엇인가? (그림으로 쉽게 정리) links ","link":"https://chankoo.github.io/posts/dhcp/","section":"posts","tags":["IP"],"title":"DHCP"},{"body":"","link":"https://chankoo.github.io/tags/ip/","section":"tags","tags":null,"title":"IP"},{"body":"","link":"https://chankoo.github.io/categories/db/","section":"categories","tags":null,"title":"DB"},{"body":"","link":"https://chankoo.github.io/tags/mysql/","section":"tags","tags":null,"title":"mysql"},{"body":"content 컬럼 텍스트의 전체 값을 인덱싱해서 키워드 검색(full text search)을 용이하게 하는 방법으로 stopword, n-gram 등의 전문 검색 알고리즘을 사용한다.\nrefs Real MySQL links ","link":"https://chankoo.github.io/posts/%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89-%EC%9D%B8%EB%8D%B1%EC%8A%A4/","section":"posts","tags":["mysql"],"title":"전문 검색 인덱스"},{"body":"content 인덱싱할 컬럼 값의 해시를 키로 이용하는 인덱스. 동등 비교에 최적화(O(N)) 되었지만 범위 검색이나 정렬에는 전혀 사용할 수 없다.\nrefs Real MySQL links 해시 ","link":"https://chankoo.github.io/posts/hash-%EC%9D%B8%EB%8D%B1%EC%8A%A4/","section":"posts","tags":null,"title":"Hash 인덱스"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/real-mysql/","section":"posts","tags":["책"],"title":"Real MySQL"},{"body":"","link":"https://chankoo.github.io/tags/%EC%B1%85/","section":"tags","tags":null,"title":"책"},{"body":"content \u0008DB row의 wrapper 객체로 데이터에 대한 접근과 도메인 로직을 함께 구현해놓는 방식이다.\nrefs P of EAA: Active Record Fetching Title#kql4 links ","link":"https://chankoo.github.io/posts/active-record/","section":"posts","tags":["django"],"title":"Active Record"},{"body":"","link":"https://chankoo.github.io/tags/django/","section":"tags","tags":null,"title":"django"},{"body":"content 동기적이지 않은 것(asynchronous)을 의미한다.\n동기적이라는 건 작업들을 순차적으로 진행함을 의미하는데, 한 작업이 끝나기를 기다려야하는 속성이 있다. 반면에 비동기는 한 작업이 끝나기를 기다리지 않고 다른 작업을 진행하는 것을 말하며, 동기적이지 않은 모든 방식을 의미한다.\n비동기의 예시 non-block I/O - 요청을 block하는 작업이 아니기에 I/O를 기다리는 동안 다른 작업을 처리할 수 있다. 멀티 스레딩 - 여러 작업을 각 스레드가 나누어 진행하기에 동기적이지 않다. block I/O 작업이라도 비동기로 진행할 수 있다 refs 비동기 프로그래밍, 비동기 I/O, 비동기 커뮤니케이션.. 비동기(asynchronous)라는 .. 참 많이 사용하는데요~ 각 맥락에 따른 의미를 설명합니다~ 들러보세영~ㅎㅎ - YouTube 👩‍💻 완벽히 이해하는 동기/비동기 \u0026amp; 블로킹/논블로킹 links ","link":"https://chankoo.github.io/posts/%EB%B9%84%EB%8F%99%EA%B8%B0/","section":"posts","tags":["동시성"],"title":"비동기"},{"body":"","link":"https://chankoo.github.io/categories/%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/","section":"categories","tags":null,"title":"아키텍처"},{"body":"content 컴퓨터 과학에서 어떠한 작업을 처리하는 흐름의 단위를 말한다.\n종류 하드웨어 스레드 - 하드웨어 레벨에서 CPU 코어의 작업을 나눠 놓은 단위이다. 코어의 한 하드웨어 스레드가 메모리에 접근하는 시간에 다른 스레드가 CPU 연산을 이용하는 병행처리를 가능케 한다. OS 스레드 - 일반적인 의미의 스레드로, CPU에서 실제로 실행(CPU 스케줄링)되는 단위이다. OS 커널이 시스템콜을 통해 스레드를 생성하고, 컨텍스트 스위칭을 한다. 네이티브 스레드, 커널 스레드라 불리기도 한다. 유저 스레드 - 유저가 관리하는 단위의 스레드로 프로그래밍 레벨에서 추상화한 OS 스레드를 의미한다. 실제로 실행하기 위해서 OS 스레드와 연결해야하며 연결 관계에 따라 일대일, 일대다, 다대다로 나뉜다. 일대일 스레드 - OS 스레드와 일대일 매핑된 유저 스레드는 OS 스레드와 같이 동작한다. 스레드 관리와 스케줄링을 OS 에 위임하고, 멀티코어 활용이 용이하다. 일대다/ 다대다 스레드 - 유저 스레드가 하나의 OS 스레드와 연결되므로, 유저 스레드간 스위칭이 빠르다. 그린 스레드 - OS와는 독립적으로 유저 레벨에서 관리되는 스레드(엄밀한 의미의 유저 스레드)를 의미하며 OS 스레드와 일대다/다대다 관계이다. refs 스레드 종류가 참 많죠? 하드웨어 스레드, OS 스레드, 네이티브 스레드, 커널 스레드, 유저 스레드, 그린 스레드까지 한번에 정리해서 알려드립니다!! - YouTube links coroutine ","link":"https://chankoo.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C/","section":"posts","tags":["동시성"],"title":"스레드"},{"body":"","link":"https://chankoo.github.io/categories/%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B5%AC%EC%A1%B0/","section":"categories","tags":null,"title":"컴퓨터구조"},{"body":"content DB Connection Pool. DB와의 커넥션 풀을 어플리케이션 단에 미리 만들어두는 것이다. DB와 커넥션을 맺고 끊기 위해 매번 TCP 통신하는 비용을 줄인다.\nmysql 기준으로 성능에 중요한 설정 max_connections: 클라이언트와 맺을 수 있는 최대 커넥션 수 wait_timeout: inactive 커넥션을 얼마까지 기다린 뒤 close 할지 설정 django 기준으로 성능에 중요한 설정 django는 커넥션 풀을 지원하지 않고, 요청마다 커넥션을 맺고 끊는다. CONN_MAX_AGE: 하지만 CONN_MAX_AGE(default: 0)에 값을 주면, 커넥션을 지정한 시간 동안 종료하지 않아 커넥션 풀처럼 재사용이 가능하다. 각 스레드는 고유한 커넥션을 갖는다. gunicorn 과 같은 서버를 이용하여 여러 스레드를 서빙하는 경우 그린 스레드(gevent) 조차 고유한 커넥션으로 연결된다. 대규모 동시성이 필요한 경우, gunicorn의 worker_connection을 크게 설정한다. db의 max_connections 를 더 크게 조정하면서 db의 부하를 살피거나 커넥션 풀 라이브러리를 사용하여 불필요한 커넥션을 유지하는 비용을 줄일 수도 있다. 고유한 커넥션을 쓰지 말고 커넥션 풀에서 스레드가 커넥션을 가져다쓰는 방식으로 수정하는 것이다. refs DBCP (DB connection pool)의 개념부터 설정 방법까지! hikariCP와 MySQL을 예제로 설명합니다! 이거 잘 모르면 힘들.. - YouTube Django에서 DB Connection 관리 SH DEVLOG Design — Gunicorn 21.2.0 documentation Scaling Django+Gevent with LDAP Connection Pooling | by J. Clayton Tallieu | Medium (Django) Django에서 Thread를 다룰 때 주의할 점 links Gunicorn worker types ","link":"https://chankoo.github.io/posts/dbcp/","section":"posts","tags":["mysql","django","gunicorn"],"title":"DBCP"},{"body":"","link":"https://chankoo.github.io/tags/gunicorn/","section":"tags","tags":null,"title":"gunicorn"},{"body":"content Log Structured Merge Tree는 로그성 데이터 색인을 위해 고안된 자료구조로, 정렬된 키-값 데이터인 SS테이블(Sorted String Table) 형식으로 디스크에 데이터를 저장한다.\nrefs 데이터 중심 애플리케이션 설계 색인(index)의 두 가지 형태 : LSM 트리 \u0026amp; B 트리 | by allocProc | Medium links B-Tree Hash 인덱스 ","link":"https://chankoo.github.io/posts/lsm-tree/","section":"posts","tags":null,"title":"LSM Tree"},{"body":"content mysql의 InnoDB는 아래와 같은 구조로 인덱스를 생성한다. 해당 인덱스는 B-Tree 로 기본키를 저장하고, 기본키는 데이터에 접근한다. 이때 기본키와 데이터는 같은 공간에 저장한다. 이를 클러스터드 인덱스(테이블이 곧 기본키 인덱스)라고 부른다.\nrefs [MySQL] B-Tree로 인덱스(Index)에 대해 쉽고 완벽하게 이해하기 - MangKyu\u0026rsquo;s Diary 데이터 중심 애플리케이션 설계 links B-Tree INNODB Hash 인덱스 전문 검색 인덱스 ","link":"https://chankoo.github.io/posts/mysql-%EC%9D%B8%EB%8D%B1%EC%8A%A4/","section":"posts","tags":["mysql"],"title":"Mysql 인덱스"},{"body":"content BST(Binary Search Tree)를 일반화한 자료구조로 2개 이상의 자식 노드를 갖는 Balanced Tree이다.\nB Tree 류 자료구조는 DB 인덱스로 많이 쓰인다. (Balanced BST인)AVL Tree, RB Tree에 비해 자식 노드 개수가 많아 디스크 접근 수가 적음 블록 단위로 메모리에 적재하는 OS 특성도 효율적으로 활용 B Tree 인덱스의 성능은 키의 크기, 키의 카디널리티, 레코드 대비 인덱스 스캔의 범위 등 다양한 요소에 영향 받는다.\n디스크 I/O로 데이터를 가져오는 단위인 블록의 크기는 고정(mysql은 16KB)인데, 키의 크기가 커지면 한블록에 저장하는 키의 개수가 적어진다. 결과적으로 더 많은 디스크 I/O를 유발하고, 인덱스 트리의 깊이를 더 깊게 만든다. 인덱스를 거치는 읽기 작업이 효율적이려면, 보통 전체 레코드 대비 25% 정도 읽는 작업 까지를 한계로 본다. 키의 카디널리티가 낮거나(ex. 성별), 전체 레코드 대비 많은 양을 읽는 작업이라면 인덱스를 사용 않는 것이 좋다. refs 데이터 중심 애플리케이션 설계 Site Unreachable Real MySQL links 블록 ","link":"https://chankoo.github.io/posts/b-tree/","section":"posts","tags":["mysql"],"title":"B-Tree"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A4%91%EC%8B%AC-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84/","section":"posts","tags":["책","분산시스템"],"title":"데이터 중심 애플리케이션 설계"},{"body":"","link":"https://chankoo.github.io/categories/%EB%B0%B1%EC%97%94%EB%93%9C/","section":"categories","tags":null,"title":"백엔드"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/","section":"posts","tags":["책","분산시스템"],"title":"가상 면접 사례로 배우는 대규모 시스템 설계 기초"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/%EA%B5%AC%EA%B8%80-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%8A%94-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%9D%BC%ED%95%9C%EB%8B%A4/","section":"posts","tags":["책"],"title":"구글 엔지니어는 이렇게 일한다"},{"body":"","link":"https://chankoo.github.io/categories/%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%A7%81/","section":"categories","tags":null,"title":"엔지니어링"},{"body":"content 응용계층 간의 통신을 위해서 고안된 인터페이스로 어플리케이션에서 시스템(하위 계층)의 자원과 기능을 사용하도록 한다. 프로토콜이 TCP라면, 응용계층에서 TCP/IP로 내려가는 창구가 된다.\n서버 소켓 - 구현상 같은 주소의 소켓이 여러개(하나의 리슨 소켓과 여러개의 통신 소켓)이다. 요청이 리슨 소켓으로 들어오면 accept하여 통신 소켓을 생성한다. 커넥션이 만들어진 후 클라이언트는 통신 소켓과 통신한다. 클라이언트 소켓 - 특정 포트를 선택하는 바인딩 과정 없이 자동으로 포트를 선택한다. 커널이 로컬 포트 중 적당한 포트를 골라 넘겨준다. 스펙상) 소켓은 internet address + port number로 표현하며 네트워크 전체에서 유니크하다. 한쌍의 소켓(src ip, src port, dest ip, dest port) 으로 커넥션이 만들어진다. (위 서버 소켓과 같이 실제 구현은 조금 다르다.)\nrefs 소켓 프로그래밍. (Socket Programming) :: 개발자를 위한 레시피 커널이 로컬 포트를 선택하는 과정 links ","link":"https://chankoo.github.io/posts/%EC%86%8C%EC%BC%93/","section":"posts","tags":["TCP"],"title":"소켓"},{"body":"","link":"https://chankoo.github.io/tags/api/","section":"tags","tags":null,"title":"api"},{"body":"content (주로)MSA에서 프로바이더 서비스들이 제공하는 데이터를 조합하여 한번에 제공하는 API 조합기를 두는 패턴\n설계\nAPI 조합기로 둘 컴포넌트 선정 클라이언트 간단하지만, 클라이언트가 외부 네트워크에 존재하는 경우 느리다 API 게이트웨이 일반적인 방법으로 API 게이트웨이 패턴이라 불림 스탠드 얼론 서비스 \u0026lsquo;주문 검색 서비스\u0026rsquo; 와 같은 서비스를 두어 조합기 역할을 맡기는 방법 효율적인 조합 로직 프로바이더 서비스 순차 호출에 따른 지연 시간을 줄이는 것이 핵심 리액티브 프로그래밍을 권장 refs 마이크로서비스 패턴 links API Gateway 패턴 리액티브 프로그래밍 ","link":"https://chankoo.github.io/posts/api-%EC%A1%B0%ED%95%A9-%ED%8C%A8%ED%84%B4/","section":"posts","tags":["MSA","api"],"title":"API 조합 패턴"},{"body":"","link":"https://chankoo.github.io/tags/msa/","section":"tags","tags":null,"title":"MSA"},{"body":"content 프록시를 사용하여 서비스 간의 통신을 관리하는 인프라 계층. 도커와 쿠버네티스는 수많은 마이크로서비스의 오케스트레이션을 가능하게 하였고, 이들 서비스 간에 흐르는 트래픽을 추적하고 관리하려는 목적으로 서비스 메시를 사용한다.\n(어플리케이션 레벨이 아니라) 인프라 레벨에서 1) 트래픽 관리 2) observability 3) 보안 강화의 기능을 제공한다.\nrefs 실무자를 위한 서비스 메시 - 지금 서비스 메시가 의미 있는 이유 links Istio Envoy ","link":"https://chankoo.github.io/posts/%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A9%94%EC%8B%9C/","section":"posts","tags":["MSA"],"title":"서비스 메시"},{"body":"content API Gateway Pattern 을 정확히 이해하자 MSA에 API Gateway Pattern이 필수적임 API Gateway Pattern은 API Gateway Framework와는 무관함 내부 api를 제공(단순 라우팅)할 용도로 API Gateway Framework를 쓰지말자 -\u0026gt; controller와 facade가 없는 프레젠테이션 레이어를 구현하게됨 인가 로직이 비즈니스 레이어(각각의 마이크로서비스)에 들어가야해서 오염됨 로직 구현의 책임을 잘못된 곳에 전가함 클라이언트가 여러 로직을 직접 호출하여 조합하거나 특정 서비스가 자신의 도메인인 것처럼 다른 서비스를 호출하여 구현하는 문제 클라이언트와 비즈니스 레이어의 강결합 클라이언트 성능 저하 내부 서비스의 프로토콜 제약 클라이언트에 응답할 수 있는 Http api 로 고정됨 API Gateway Pattern 의 종류 Edge Gateway(중앙 집중식) 가장 일반적인 패턴으로 게이트웨이가 거의 모든 것을 처리함. (마이크로)서비스가 많고, 서비스간(east-west) 트래픽이 많은 경우 적합하지 않음 SSL/TLS termination 인증 (Authentication) 권한 부여 (Authorization) 요청 라우팅 (Request routing) 속도 제한 (Rate limiting) Request/response manipulation Facade routing Two-Tier Gateway(2계층) 보안 게이트웨이와 라우팅 게이트웨이로 역할을 나눔. Edge Gateway 단독으로 쓰는 것보다 유연하지만 라우터 하나에 모든 서비스가 물려있는 한계가 있음 보안 게이트웨이 SSL/TLS termination 인증 (Authentication) 연결 및 요청의 중앙 집중식 로깅 (Centralized logging of connections and requests) 추적 주입 (Tracing injection) 라우팅 게이트웨이 권한 부여 (Authorization) 서비스 발견 (Service discovery) 부하 분산 (Load balancing) Microgateway 2계층을 확장하여 서비스마다 전용 게이트웨이를 두는 방식으로, 서비스 간 트래픽을 관리하는데 용이한 구조 Edge 게이트웨이 SSL/TLS termination 라우팅 (Routing) 속도 제한 (Rate limiting) 마이크로 게이트웨이 부하 분산 (Load balancing) 서비스 발견 (Service discovery) API별 인증 (Authentication per API) Per-Pod Gateway 개별 pod(또는 컨테이너)에 프록시 게이트웨이를 포함하는 형태로 Microgateway를 확장 Sidecar Gateways and Service Mesh(사이드카 게이트웨이 및 서비스 메시) 사이드카 게이트웨이가 ingress와 engress 를 모두 수행하는 형태로 보통 서비스 메시를 통하여 구현된다. 사이드카 게이트웨이 아웃바운드 부하 분산 (Outbound load balancing) 서비스 검색 통합 (Service discovery integration) 서비스 간 인증 (Inter‑service authentication) 권한 부여 (Authorization) refs WOOWACON 마이크로서비스 패턴 효과적인 API 제공을 위한 API Gateway 패턴 선택 - NGINX STORE links 서비스 메시 ","link":"https://chankoo.github.io/posts/api-gateway-%ED%8C%A8%ED%84%B4/","section":"posts","tags":["MSA","api"],"title":"API Gateway 패턴"},{"body":"content 서버-클라이언트 양방향 일대일 통신을 제공하는 프로토콜\nhttp는 아니지만 http 업그레이드 헤더를 사용하도록 호환된다 통신 상대가 정해져있어 데이터를 절약한다. stateful 하기에 채널을 온메모리로 관리해야한다. refs 리얼월드 HTTP links 소켓 ","link":"https://chankoo.github.io/posts/websocket/","section":"posts","tags":["web","http"],"title":"WebSocket"},{"body":"content Server-Sent Events. HTML5 의 기능으로, 한번의 요청에 서버가 여러 이벤트(청크) 전송을 제공하는 프로토콜. http 위에서 동작하는 별도 텍스트 프로토콜이다(text/event-stream).\nrefs 리얼월드 HTTP Server-sent events - Web APIs | MDN links ","link":"https://chankoo.github.io/posts/sse/","section":"posts","tags":["web","http"],"title":"SSE"},{"body":"","link":"https://chankoo.github.io/tags/%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98/","section":"tags","tags":null,"title":"기억장치"},{"body":"content 파일 시스템에서 파일 관리를 위해 파일의 위치, 크기, 소유자 등의 정보를 갖고있는 특수한 형태의 파일.\nrefs links 파일 시스템 ","link":"https://chankoo.github.io/posts/%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC/","section":"posts","tags":["기억장치"],"title":"디렉토리"},{"body":"content Command와 Query를 다른 것으로 보고 명시적으로 분리하는 패턴. OOP 관점에서 Command를 담당하는 객체와, Query를 담당하는 객체의 책임을 분리하는 것으로 이해하면된다.\nMSA, DDD, 이벤트 소싱 등 다른 기술과 함께 활용되며 다양하게 구현한다.\n특히 마이크로 서비스로 분리한 아키텍처에서는 Query가 어려운데, 여러 서비스에 흩어진 데이터를 조회하는 비용이 크기 때문이다. 그래서 Query 효율을 높이는 관점에서 CQRS를 많이 활용한다.\nrefs 마이크로서비스 패턴 links ","link":"https://chankoo.github.io/posts/cqrs/","section":"posts","tags":["MSA"],"title":"CQRS"},{"body":"content 2단계 커밋(Two Phase Commit) 으로 분산 트랜잭션 환경에서 트랜잭션을 구현하는 방법이다. 트랜잭션의 커밋을 준비와 실제 동작의 2단계로 나누어, 분산 환경에서 커밋 준비가 완료되면 비로소 실제 커밋을 하는 방식이다.\n2PC 에서 원자성은 2개의 되돌릴 수 없는 포인트에 의해 결정되는데, 1) 참여자가 준비 단계에서 커밋 가능하다고 답변하는 시점과 2) 코디네이터(리소스 매니저)가 커밋하는 시점이다. 1)과 2) 가 만족되면 참여자의 커밋이 어떤 사유로 실패하든, 반복적으로 커밋을 시도한다.\n트랜잭션에 관여하는 모든 서비스가 정상 동작해야하는 가용성 이슈와, 동기적으로 동작하는 성능 이슈 때문에 지고 있는 추세이다.\nrefs [Architecture] MSA : SAGA 패턴이란 - Azderica 데이터 중심 애플리케이션 설계 마이크로서비스 패턴 links 분산 트랜잭션 ","link":"https://chankoo.github.io/posts/2pc/","section":"posts","tags":["MSA","분산시스템"],"title":"2PC"},{"body":"content 분산 트랜잭션 환경에서 서비스 간 비동기 메시징을 이용하여 편성한 일련의 로컬 트랜잭션.\n각 서비스가 변경분 커밋을 수행하고 완료 메시지를 발행하여 다음 서비스의 트랜잭션을 유도한다. 마찬가지로 각 서비스는 보상 트랜잭션(compensatable transaction)을 통해 문제 발생 시 변경분을 발생 역순으로 undo하도록해 롤백한다.\n분상 환경에서 메시징을 이용하는 특성상, saga 그 자체로는 엄격한 Isolation을 제공할 수 없다. 메시지 읽고 처리하는 행위를 격리하기 힘들기에, 메시지 읽는 순서가 바뀐다든지 하는 이슈로 트랜잭션의 결과가 상이한 문제가 생길 수 있는 것이다. 그래서 sementic lock, commutative update, pessimistic view, reread value 등의 대안을 이용한다.\nrefs 마이크로서비스 패턴 links 분산 트랜잭션 Isolation Levels ","link":"https://chankoo.github.io/posts/saga-%ED%8C%A8%ED%84%B4/","section":"posts","tags":["MSA","분산시스템"],"title":"Saga 패턴"},{"body":"content 트랜잭션의 속성(ACID)을 2개 이상으로 분산된 네트워크에서도 만족시키는 트랜잭션.\nX/Open DTP(XA) 모델이라는 표준이 있으며, 이는 2단계 커밋(2PC)를 활용하여 각 리소스를 트랜잭션으로 관리한다. 요즘엔 2PC 대신 Saga 패턴을 쓰는 추세이다.\nrefs 분산 트랜잭션 - 위키백과, 우리 모두의 백과사전 X/Open XA - 위키백과, 우리 모두의 백과사전 마이크로서비스 패턴 links Transaction 2PC Saga 패턴 ","link":"https://chankoo.github.io/posts/%EB%B6%84%EC%82%B0-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98/","section":"posts","tags":["MSA","분산시스템"],"title":"분산 트랜잭션"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/%EB%A6%AC%EC%96%BC%EC%9B%94%EB%93%9C-http/","section":"posts","tags":["책","http"],"title":"리얼월드 HTTP"},{"body":"content HTTP/1.1 이후 이루어진 대규모 업데이트(2015년)로 통신 고속화를 목적으로 하는 프로토콜.\n스트림을 사용해 (텍스트가 아니라) 바이너리 데이터를 다중으로 송수신한다. 서버 푸시를 통해 우선순위 높은 콘텐츠를 클라이언트 요청 없이도 전송할 수 있다. 헤더를 압축(HPACK)해 전송한다. refs 리얼월드 HTTP links 스트림 ","link":"https://chankoo.github.io/posts/http2/","section":"posts","tags":["http"],"title":"HTTP2"},{"body":"content google에서 개발한 RPC(Remote Procedure Call) 프레임워크.\n기존 RPC처럼, 네트워크 통신이 필요한 요청을 로컬에서 호출하는 것처럼 도와주는 프로토콜이다. HTTP/2 를 사용하며 프로토콜 버퍼(ProtoBuf)를 이용해 통신 효율을 높이는 특징이 있다.\n일반적인 http 기반 API(REST 등) 보다 더 빠르고(5배 가량), HTTP2의 기능을 사용할 수 있는 것이 장점이다.\nrefs [네이버클라우드 기술\u0026amp;경험] 시대의 흐름, gRPC 깊게 파고들기 #1 | by NAVER CLOUD PLATFORM | NAVER CLOUD PLATFORM | Medium What is RPC? gRPC Introduction. - YouTube links HTTP2 프로토콜 버퍼 ","link":"https://chankoo.github.io/posts/grpc/","section":"posts","tags":["http","api"],"title":"gRPC"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%A8%ED%84%B4/","section":"posts","tags":["책","MSA"],"title":"마이크로서비스 패턴"},{"body":"","link":"https://chankoo.github.io/tags/%EC%9D%B8%EC%A6%9D/","section":"tags","tags":null,"title":"인증"},{"body":"content 쿠키와 세션 보다 토큰 기반 인증 방식(JWT)를 이용하면 장점이 많아 현대 웹, 앱은 대부분 JWT를 쓴다.\n쿠키와 세션은 세션 아이디를 쿠키에 담고, 별도 세션을 저장하는 방식이다. 요청시 세션 아이디를 이용해 저장소의 세션을 확인하여 인증한다. 그렇기에 세션 저장소를 유지하는 비용이 발생하고, 요청이 stateful 한 상태가 되며, 매번 요청시 세션을 조회해야하는 단점이 있다.\n반면에 JWT는 토큰 자체로 인증 여부를 판단하기에 별도 저장소가 필수적이지 않으며 매번 조회 요청을 보내지 않아도 된다. 또한 stateful 하지 않아 확장성이 좋다.\nrefs JWT(Json Web Token) 알아가기 links JWT ","link":"https://chankoo.github.io/posts/%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EC%8B%9D-%EB%B9%84%EA%B5%90/","section":"posts","tags":["http","쿠키","인증"],"title":"인증 방식 비교"},{"body":"","link":"https://chankoo.github.io/tags/%EC%BF%A0%ED%82%A4/","section":"tags","tags":null,"title":"쿠키"},{"body":"content JSON Web Token. 사용자의 정보를 Json에 담아 보내는 형식의 웹 토큰이다.\nHeader / Payload / Signature 로 나뉘며, base64 인코딩을 통해 url-safe한 xxx.yyy.zzz 형태로 표현한다. Header에는 Signature 에 서명한 알고리즘 정보를 담는다. Payload에는 실제 사용자 정보를 Json 형태로 담으며 추가에 열려있다. Signature는 비대칭키 방식을 사용하여 header와 payload가 변경 안되었음을 보증한다.\n주로 인증을 위해 사용하는데, JWT의 유효성(위조 여부)만 확인하면 인증은 완료된다. 이미 JWT 발급 시점에 (id, pwd로) 사용자를 인증했고 그 결과로 JWT를 생성했기에, (Signature를 이용하여) JWT 가 위조되지 않았다는 것만 확인하면 JWT 발급 시점과 같은 사용자라는 것을 알게되는 원리이다.\n동작은 아래와 같다. 액세스 토큰의 유효 기간을 짧게하고, 리프레시 토큰을 사용하여 액세스 토큰이 탈취되는 리스크를 보완한다.\n사용자가 로그인하면, 서버는 JWT(액세스 토큰, 리프레시 토큰)를 발급한다. 사용자는 JWT를 쿠키나 로컬 스토리지에 저장한다. 사용자는 액세스 토큰과 리프레시 토큰을 포함하여 서버에 요청한다. 액세스 토큰이 만료되었다면 서버는 리프레시 토큰을 확인한다. 리프레시 토큰이 인증된다면 서버는 액세스 토큰을 다시 발급한다. 서버는 액세스 토큰의 위조 여부를 확인하여 인증한다. 리프레시 토큰이 탈취되는 경우를 대비해 별도의 토큰 저장소를 운영하기도 한다.\n액세스 토큰과 리프레시 토큰 쌍을 저장하여 리프레시 토큰으로 새 액세스 토큰 발급 요청이 오면 리프레시 토큰으로 기존 액세스 토큰을 조회하여 만료 여부를 확인한다 기존 액세스 토큰이 만료되지 않았다면, 리프레시 토큰이 탈취된 것으로 간주, 리프레시 토큰을 만료시킨다 JWT를 쿠키에 (Http only 옵션 사용하여) 저장하면 브라우저에서(js로) 쿠키 접근이 불가해 XSS로 부터 안전하지만, 매번 request에 권한을 담기 때문에 CSRF로 부터 취약하다.\nrefs JSON Web Token - Wikipedia RFC 7519: JSON Web Token (JWT) 🌐 JWT 토큰 인증 이란? (쿠키 vs 세션 vs 토큰) JWT에서 Refresh Token은 왜 필요한가? JWT는 어디에 저장해야할까? - localStorage vs cookie links 쿠키 보안 XSS CSRF ","link":"https://chankoo.github.io/posts/jwt/","section":"posts","tags":["web","http","인증"],"title":"JWT"},{"body":"","link":"https://chankoo.github.io/tags/python/","section":"tags","tags":null,"title":"python"},{"body":"content heap을 이용하는 q의 구현을 제공하는 모듈\nheap = [] heapq.heappush(heap, item) heapq.heappop(heap) heappush 와 heappop 을 통해 힙 큐를 구현할 수 있다.\n주의할 것은\nheap 은 heap 자료구조가 아님. 선형 자료구조(ex. 리스트) 를 받아 힙의 구현을 도와주는 모듈임 최소 힙을 구현함 0을 제외한 인덱스로 읽지 말자 - heap[0] 을 제외한 값은 정렬된 형태가 아님 refs heapq — 힙 큐 알고리즘 — Python 3.12.0 문서 파이썬의 heapq 모듈로 힙 자료구조 사용하기 | Engineering Blog by Dale Seo links ","link":"https://chankoo.github.io/posts/python-heapq/","section":"posts","tags":["python"],"title":"Python heapq"},{"body":"content Back/Forward Cache 는 브라우저가 제공하는 페이지 전체(js 포함) 스냅샷으로, 페이지 전환 이벤트(pageshow, pagehide)가 발생할때 캐시한다.\nrefs Back/forward cache | Articles | web.dev links ","link":"https://chankoo.github.io/posts/bfcache/","section":"posts","tags":["cache","브라우저"],"title":"bfcache"},{"body":"content 클라이언트의 http 요청의 갱신 여부를 파악하기 위해 설정하는 응답 헤더.\n요청 -\u0026gt; 서버가 요청을 Etag 변환(해시 사용) -\u0026gt; 응답 헤더에 Etag 포함 -\u0026gt; 클라이언트가 사용(If-None-Match에 담아)해 요청 -\u0026gt; 동일한 Etag 라면 http 304 Not Modified 반환\nrefs Etag를 이용하여 더 나은 Restful API 만들기 | 요즘IT Conditional View Processing | Django documentation | Django ETag - HTTP | MDN links ","link":"https://chankoo.github.io/posts/etag/","section":"posts","tags":["http","cache"],"title":"Etag"},{"body":"content 컴퓨터 과학에서 통신을 위해 적합한 형식으로 데이터를 변환하는 것.\n마샬링은 객체의 통신 뿐 아니라 서버에서 서버, 프로그램에서 프로그램 등 데이터의 통신을 위한 변환을 통칭한다. 메모리를 공유하지 않는 상황에서, 메모리에 올라간 데이터를 통신을 위한 형태로 변환하는 것이다.\n직렬화는 마샬링의 한 종류이며 복원의 목적으로 객체를 바이트 스트림으로 변환해 저장하는 것을 의미한다.\nrefs 마샬링 (컴퓨터 과학) - 위키백과, 우리 모두의 백과사전 links ","link":"https://chankoo.github.io/posts/marshalling/","section":"posts","tags":null,"title":"Marshalling"},{"body":"content 인터페이스 분리 원칙; Interface Separation Principle 인터페이스를 분리하여, 요소가 사용하는 인터페이스에만 의존하도록 설계해야한다.\nrefs 클린 아키텍처 links SOLID ","link":"https://chankoo.github.io/posts/isp/","section":"posts","tags":["SOLID"],"title":"ISP"},{"body":"","link":"https://chankoo.github.io/tags/solid/","section":"tags","tags":null,"title":"SOLID"},{"body":"content 리스코프 치환 원칙; Liskov Subsitution Principle 상위 타입 객체는 하위 타입 객체로 별도 조작 없이 치환 가능해야한다.\n객체 지향 언어는 다형성을 제공하기에, LSP를 지킨 설계를 활용하기 유리하다. 사용할 하위 타입을 런타임에 선택하여 상위 타입을 대체하기 용이하다.\nLSP를 위반하면 OCP를 위반하는 것이다. 하위 타입을 추가(확장)하여 상위 타입을 바로 대체할 수 없기 때문이다. LSP를 위반한다면 보통 해당 객체를 사용하는 클라이언트 코드를 수정해야한다. 그리고 이 수정은 끔찍한 형태로 의존을 낳는다. 흔히 드는 예시가 직사각형을 상속한 정사각형 인데, 정사각형은 반드시 너비와 높이가 일치해야하므로 직사각형 객체를 대체할 수 없다. 때문에 다형성을 활용해 의존 없이 짜두었던 클라이언트 코드에 직사각형 여부를 확인하는 방식(isinstanceof 나 downcasting을 사용하는 것이 전형적인 위반이다)으로 코드를 수정해야한다. 수정에는 닫혀 있다는 OCP도 위반하는 것이다.\nrefs 클린 아키텍처 Fetching Title#gtbo links OCP 다형성 SOLID ","link":"https://chankoo.github.io/posts/lsp/","section":"posts","tags":["SOLID"],"title":"LSP"},{"body":"content 개방-폐쇄 원칙; Open Close Principle 소프트웨어 요소는 확장에는 open, 수정에는 close여야 한다. 수정 보다 비용이 적은 확장으로 소프트웨어를 수정해야한다.\nOCP를 지키기 위해서는 의존 관계를 잘 설계해야한다. 의존 관계가 확장 가능한 요소와 수정해야하는 요소를 결정짓기 때문인데, A -\u0026gt; B (A가 B에 의존)이라면 A는 확장 가능한 요소이고 B는 수정해야하는 요소가 되는 것이다.\n이를 위해 DIP를 지켜야한다. 추상 보다 구현의 변화가 많은데, 구현이 추상에 의존해야 구현을 확장할 수 있기 때문이다.\n모듈 레벨(OOP 클래스)에만 적용되는 원칙이 아니다. 오히려 아키텍처 컴포넌트 수준에서 OCP를 지킨다면 더 효과가 클 수 있다.\nrefs 클린 아키텍처 links DIP SOLID ","link":"https://chankoo.github.io/posts/ocp/","section":"posts","tags":["SOLID"],"title":"OCP"},{"body":"content 설계 시점에 다루는 코드 덩어리. 시점상 가장 먼저 구현하는 단위\nrefs 개발자에서 아키텍트로 클린 아키텍처 links 컴포넌트 ","link":"https://chankoo.github.io/posts/%EB%AA%A8%EB%93%88/","section":"posts","tags":null,"title":"모듈"},{"body":"content 아키텍트는 기술과 비즈니스 그리고 사용자를 모두 이해해야한다. 유저영역의 문제를 엔지니어링 관점에서 정의하여 소프트웨어 아키텍처를 설계한다. 아키텍처는 품질 속성과 기술 부채를 고려하여 시스템을 요소로 분리해야한다. 그리고 큰 그림 속에서 요소들을 연결하고 통합한다. 아키텍트로서 프로젝트 정리 이해관계자들은 누구였고 주요 비즈니스 목표는 무엇이었는가 최종적으로 어떤 결과를 도출했는가 어떤 기술을 사용했는가 가장 큰 리스크는 무엇이었고, 어떻게 극복했는가 다시 시작할 수 있다면 어떤 점을 다르게 하겠는가 refs links ","link":"https://chankoo.github.io/posts/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EC%84%9C-%EC%95%84%ED%82%A4%ED%85%8D%ED%8A%B8%EB%A1%9C/","section":"posts","tags":["책"],"title":"개발자에서 아키텍트로"},{"body":"content 모듈 수준의 소프트웨어 설계 원칙.\nSRP OCP LSP ISP DIP\nrefs 클린 아키텍처 links 모듈 ","link":"https://chankoo.github.io/posts/solid/","section":"posts","tags":["SOLID"],"title":"SOLID"},{"body":"content 단일 책임 원칙 - Single Responsibility Principle 모듈은 한 액터(사용자, 이해관계자)만 책임진다. 모듈을 변경한다면 그 이유는 반드시 한 액터 때문이어야 한다.\nSRP를 따르면, 여러 액터의 요구를 책임지는 모듈은 책임을 찢어야 한다.\n예를 들어 클래스 Employee가 재무팀을 위한 급여 계산 / 인사팀을 위한 업무 시간 계산을 책임지고 있다면, 이는 SRP를 위반한다. 그래서 -\u0026gt; 급여 계산을 위한 클래스와 업무 시간 계산을 위한 클래스로 책임을 분리하고, EmployeeFacade 클래스를 두어 인터페이스를 정리할 수 있다.\nrefs 클린 아키텍처 links SOLID 퍼사드 패턴 ","link":"https://chankoo.github.io/posts/srp/","section":"posts","tags":["SOLID"],"title":"SRP"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/gof%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/","section":"posts","tags":["책","디자인패턴"],"title":"GoF의 디자인 패턴"},{"body":"","link":"https://chankoo.github.io/tags/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4/","section":"tags","tags":null,"title":"디자인패턴"},{"body":"content 싱글 스레드에서 요청을 비동기로 처리하기 위해 사용하는 루프.\n(gevent에서) I/O 요청시 커널에 요청을 주고 커널로 부터 응답 받은 이벤트를 처리하기 위해 돌고있는 루프 유저 영역 요청 -\u0026gt; 이벤트 루프 -\u0026gt; 이벤트 루프 응답 -\u0026gt; 대기하며 진행 커널 영역 블락 -\u0026gt; 이벤트 발생 -\u0026gt; 이벤트 루프에 노티 -\u0026gt; 대기 중인 것을 실현 (javascript에서) 콜백 큐에서 콜백 함수를 꺼내 콜 스택에 넣어 주는 루프 refs DEVIEW 2014 [JS] 도대체 이벤트 루프가 뭔가요? - 배하람의 블로그 links gevent 비동기 ","link":"https://chankoo.github.io/posts/event-loop/","section":"posts","tags":["javascript","동시성","python"],"title":"Event Loop"},{"body":"","link":"https://chankoo.github.io/tags/javascript/","section":"tags","tags":null,"title":"javascript"},{"body":"content 연산을 수행하는 비용(시간, 공간)의 상한을 대략적으로 표기하는 방법\n비용이 어떤 비율로 증가하는지(상수, 선형, 로그, 지수 등)에만 관심있어서 지배적이지 않은 항은 무시한다 O(2N) == O(N) O(log_2(N)) == O(log_10(N)) refs links ","link":"https://chankoo.github.io/posts/big-o/","section":"posts","tags":null,"title":"Big-O"},{"body":"","link":"https://chankoo.github.io/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/","section":"categories","tags":null,"title":"알고리즘"},{"body":"content 알고리즘을 수행 과정 별로 분할하여 비용(시간 복잡도)을 구하는 분석 방법. 일련의 연산들을 구분하여 평균적인 비용을 낸다는 측면에서 worst-case approach 보다 현실적일 수 있다.\nrefs https://ko.wikipedia.org/wiki/%EB%B6%84%ED%95%A0%EC%83%81%ED%99%98%EB%B6%84%EC%84%9D links Big-O ","link":"https://chankoo.github.io/posts/amortized-analysis/","section":"posts","tags":null,"title":"amortized analysis"},{"body":"content 알고리즘을 수행 과정 별로 분할하여 비용(시간 복잡도)을 구하는 분석 방법. 일련의 연산들을 구분하여 평균적인 비용을 낸다는 측면에서 worst-case approach 보다 현실적일 수 있다.\nrefs 분할상환분석 - 위키백과, 우리 모두의 백과사전 links Big-O ","link":"https://chankoo.github.io/posts/%EB%B6%84%ED%95%A0-%EC%83%81%ED%99%98-%EB%B6%84%EC%84%9D/","section":"posts","tags":null,"title":"분할 상환 분석"},{"body":"content 캐시 라인(or cache block)은 프로세서의 캐시가 메모리로 부터 읽어오는 데이터 chunk.\n보통 32, 64, 128 바이트 사이즈이다. 예를 들어 캐시 라인 사이즈가 64B이고 64kB 크기의 캐시를 쓴다면, 캐시는 1024개(= 64kB / 64B) 라인으로 구성된다.\nrefs 3.2. Cache Lines and Cache Size links ","link":"https://chankoo.github.io/posts/cache-line/","section":"posts","tags":["cache"],"title":"cache line"},{"body":"","link":"https://chankoo.github.io/tags/cpu/","section":"tags","tags":null,"title":"CPU"},{"body":"content (프로세서의 메모리)참조는 랜덤이 아니고 비슷한 지역에서 빈번하게 일어난다는 특성(Locality of reference)\nSpatial Locality 와 2) Temporal Locality로 크게 나뉘는데 1)은 비슷한 공간의 영역을 반복적으로, 2)는 최근에 참조한 영역을 반복적으로 참조하는 현상을 말한다. 프로세서의 캐시는 locality를 고려하여 동작하기에 프로그램을 짤 때 locality를 활용한다면 더 캐시 효율적이다.\nrefs Locality of reference - Wikipedia links ","link":"https://chankoo.github.io/posts/locality/","section":"posts","tags":["CPU","cache","메모리"],"title":"locality"},{"body":"","link":"https://chankoo.github.io/tags/%EB%A9%94%EB%AA%A8%EB%A6%AC/","section":"tags","tags":null,"title":"메모리"},{"body":"","link":"https://chankoo.github.io/tags/java/","section":"tags","tags":null,"title":"java"},{"body":"content (해시) 충돌은 1) 서로 다른 값이 동일한 해시를 뱉거나(해시 충돌) 2) 서로 다른 해시가 동일한 인덱스를 뱉는 경우를 말한다.\n해시 자료구조를 구성할때 모든 key가 충돌한다면, 탐색에 O(n)이 걸린다.\n모든 데이터가 하나의 인덱스에 저장(Separate Chaning)되거나 다른 인덱스에 순차적으로 저장(Open Addressing)될 것이기 때문이다. 저장할 값의 배열이 크지 않다면, Open Addressing 이 캐시 효율적이다. 연속된 공간에 저장한 데이터는 함께 캐싱될 것이고(cache line), spatial locality 에 따라 hit ratio가 높을 것이기 때문이다. 파이썬이 오픈 어드레싱 방식을 쓴다.\n반면, 배열이 커지면 배열이 한꺼번에 캐싱되지 않아 캐시 효율은 떨어진다. 그러면 Separate Chaining의 효율이 높아지는데, 리스트에서 remove 연산의 효율이 배열보다 좋기 때문이다.(자바의 Hashmap 은 Separate Chaining을 쓴다)\nrefs NAVER D2 caching - Cache Performance in Hash Tables with Chaining vs Open Addressing - Stack Overflow Site Unreachable links cache line locality ","link":"https://chankoo.github.io/posts/%ED%95%B4%EC%8B%9C-%EC%B6%A9%EB%8F%8C/","section":"posts","tags":["java","python"],"title":"해시 충돌"},{"body":"content 임의 길이 데이터를 해시 함수를 통해 변환한 값으로, 1) 길이가 고정이고 2) 변환 전 값을 구하는 역함수가 없다.\nrefs links ","link":"https://chankoo.github.io/posts/%ED%95%B4%EC%8B%9C/","section":"posts","tags":null,"title":"해시"},{"body":"content 해시를 이용해서 key: value 쌍을 저장하고 O(1) 에 value를 찾는 자료구조이다.\n해시 함수를 통해 immutable 한 key에서 해시를 얻는다 크기를 고정한(n) 배열을 생성하고 해시를 인덱스(0~n-1)로 변환하여(보통 modulo 연산. 해시 % n) 배열의 인덱스에 키 밸류를 저장한다 리스트, 그래프 형태로(Separate Channing)로 저장하거나 인접한 다른 인덱스에 삽입(Open Addressing)한다. (해시) 충돌이 발생하면 최악의 경우 탐색에 O(n)이 걸린다.\nrefs links 해시 해시 충돌 ","link":"https://chankoo.github.io/posts/%ED%95%B4%EC%8B%9C-%ED%85%8C%EC%9D%B4%EB%B8%94/","section":"posts","tags":null,"title":"해시 테이블"},{"body":"content 저장 장치에 접근할 수 있는 경로를 특정 디렉토리에 연결하여, 디렉토리 구조에 편입하는 일\nrefs links 디렉토리 ","link":"https://chankoo.github.io/posts/%EB%A7%88%EC%9A%B4%ED%8A%B8/","section":"posts","tags":["기억장치"],"title":"마운트"},{"body":"content 블록 단위로 데이터 전송하는 기억장치. 캐릭터 디바이스에 비해 전송 속도가 빠르다.\nrefs links 블록 캐릭터 디바이스 ","link":"https://chankoo.github.io/posts/%EB%B8%94%EB%A1%9D-%EB%94%94%EB%B0%94%EC%9D%B4%EC%8A%A4/","section":"posts","tags":["기억장치"],"title":"블록 디바이스"},{"body":"content 바이트 단위로 데이터 전송하는 문자 기반 기억장치. 키보드, 마우스, 모니터 등\nrefs links ","link":"https://chankoo.github.io/posts/%E1%84%8F%E1%85%A2%E1%84%85%E1%85%B5%E1%86%A8%E1%84%90%E1%85%A5-%E1%84%83%E1%85%B5%E1%84%87%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%89%E1%85%B3/","section":"posts","tags":["기억장치"],"title":"캐릭터 디바이스"},{"body":"","link":"https://chankoo.github.io/tags/aws/","section":"tags","tags":null,"title":"AWS"},{"body":"content AWS Elastic Block Store AWS가 제공하는 기본 블록 디바이스. 네트워크 통신하는 논리 드라이브(볼륨)이다.\nrefs links 블록 디바이스 볼륨 ","link":"https://chankoo.github.io/posts/ebs/","section":"posts","tags":["기억장치","AWS"],"title":"EBS"},{"body":"content Process Control Block. 프로세스 관리를 위한 정보를 담은 OS 커널의 자료구조이다. 프로세스 실행과 스케줄링 등에 필요한 정보를 포함하여 OS 입장에서 프로세스를 표현한다.\nrefs links ","link":"https://chankoo.github.io/posts/pcb/","section":"posts","tags":["CPU"],"title":"PCB"},{"body":"content OS가 저장 매체의 정보를 관리하는 단위. 저장할(디스크에 쓸) 때 블록(보통 4kb) 단위로 정보를 묶어서 쓰고, 그 참조를 관리한다.\n윈도우에선 \u0026lsquo;클러스터\u0026rsquo;라는 용어도 쓴다.\nrefs links ","link":"https://chankoo.github.io/posts/%E1%84%87%E1%85%B3%E1%86%AF%E1%84%85%E1%85%A9%E1%86%A8/","section":"posts","tags":["기억장치"],"title":"블록"},{"body":"content 파일시스템을 갖춘 논리적 스토리지 영역. 보통 마운트하여 접근한다.\nrefs links 마운트 파일 시스템 ","link":"https://chankoo.github.io/posts/%EB%B3%BC%EB%A5%A8/","section":"posts","tags":["기억장치","파일시스템"],"title":"볼륨"},{"body":"","link":"https://chankoo.github.io/tags/%ED%8C%8C%EC%9D%BC%EC%8B%9C%EC%8A%A4%ED%85%9C/","section":"tags","tags":null,"title":"파일시스템"},{"body":"","link":"https://chankoo.github.io/tags/%EA%B4%91%EA%B3%A0/","section":"tags","tags":null,"title":"광고"},{"body":"content GTM 태그(어플리케이션에 삽입하여 이벤트를 전송하는 코드)를 관리하는 역할을 한다. 태그가 전송한 데이터를 분석하는 툴과는 별개이다.\nrefs links ","link":"https://chankoo.github.io/posts/%EA%B5%AC%EA%B8%80-%ED%83%9C%EA%B7%B8-%EB%A7%A4%EB%8B%88%EC%A0%80/","section":"posts","tags":["광고"],"title":"구글 태그 매니저"},{"body":"","link":"https://chankoo.github.io/categories/%EA%B8%B0%ED%83%80/","section":"categories","tags":null,"title":"기타"},{"body":"content 제너레이터는 제어 흐름을 양보할 수 있는 Iterator이다. 루프를 순회하는 도중 의도적으로 순회를 멈추고, 자신을 호출한 루틴으로 제어 흐름을 양보할 수 있다. 때문에 semicoroutine 이라고도 불리는데, (제어 흐름을 넘겨줄 routine을 지정할 수 있는) coroutine 의 특수한 형태이기 때문이다.\n이러한 제너레이터의 동작은 1) 메모리 효율 2) 동시성 의 관점에서 살펴볼만하다. 루프 내 요소의 평가가 필요할때 메모리에 요소를 올리는 lazy evaluation 이고, 원하는 시점에 제어흐름을 넘겨가며 동시성 프로그래밍을 가능케하는 pseudo thread 이기 때문이다.\nrefs Generator (computer programming) - Wikipedia links Iterator coroutine ","link":"https://chankoo.github.io/posts/generator/","section":"posts","tags":["python"],"title":"Generator"},{"body":"content Co-Routine. 다른 루틴과 동등한 레벨에서 상호 협력하는 루틴. routine - subroutine 으로 종속되는 개념과 대비된다.\n프로그래머는 코루틴 간 제어 흐름을 의도에 따라 통제하는데, 실행 중인 코루틴이 자신의 흐름을 멈추고 다른 코루틴에 양보(yield) 하도록 하는 방식이다.\n코루틴 간의 스위칭을 통해 (스레드 스위칭과 유사하게) 동시성 프로그래밍할 수 있다. 코루틴이 \u0026ldquo;lightweight\u0026rdquo; 스레드라고도 불리는 이유이다.\n스레드와의 주된 차이는, 별도의 스택 메모리를 갖지 않는다(stackless coroutine)는 점, 병렬 실행이 불가하다는 점 등이 있다.\n+) 작업 후 다른 루틴에게 명시적으로 제어권을 넘겨줄 경우, CPS를 따라 구현했다고 볼 수 있다.\nrefs 파이썬과 동시성 프로그래밍 - Sungho\u0026rsquo;s Blog Coroutine, Thread 와의 차이와 그 특징 - Crucian Carp links 동시성 스레드 CPS ","link":"https://chankoo.github.io/posts/coroutine/","section":"posts","tags":["동시성"],"title":"coroutine"},{"body":"content DB에서 데이터를 조작하는 논리적 작업 단위. 이론적으로 Transaction은 ACID해야한다.\n예로 들면, 송금은 한 Transaction 이어야 하는데, 송금을 구성하는 1) 본인 계좌에서 출금 2) 상대 계좌에 입금이\nAtomic - 발생하거나, 발생하지 않거나하여 그 중간 상태가 없어야하며 Correct(Consistant) - 송금 실행 전 후 모두 관련된 제약을 지키는 상태여야하며 Isolated - 송금 실행 중 다른 Transaction과는 격리(read x, write x)되어야 하며 Durable - 송금 성공의 시점 데이터를 지속적으로 보관해야한다. refs links ","link":"https://chankoo.github.io/posts/transaction/","section":"posts","tags":null,"title":"Transaction"},{"body":"content 가상 컴퓨터의 실행 프로그램을 위한 이진 표현법. 하드웨어가 아니라 소프트웨어에서 해석되기에 기계어보다 더 추상적이다.\nrefs 바이트코드 - 위키백과, 우리 모두의 백과사전 links ","link":"https://chankoo.github.io/posts/bytecode/","section":"posts","tags":["python"],"title":"Bytecode"},{"body":"content ISA를 구현하는 방법을 말한다.\n예를들어, Intel 과 AMD는 동일한 x86 ISA를 쓰지만 Microarchitecture가 다르기에 성능이 다르다.\nrefs links ISA ","link":"https://chankoo.github.io/posts/microarchitecture/","section":"posts","tags":["CPU"],"title":"Microarchitecture"},{"body":"content 명령어 집합 구조(Instruction Set Architecture) CPU가 이해할 수 있는 기계어 명령어 집합을 의미한다. CPU 마다 비트 길이와 코드가 다르다.\n각 비트를 기능적으로 분할하여 의미를 부여했고, 이 기계어 명렁어와 일대일 매핑하여 문자화 한 것이 어셈블리어(Assembly Language)다.\n이는 소프트웨어와 하드웨어간 인터페이스를 규정한 것이다.\n프로세서 칩을 만드는 회사마다 ISA가 다른데, 익숙한 예로 Intel의 칩은 x86을, ARM의 칩은 ARM 을 쓰는 식이다.\nrefs 명령어 집합 - 위키백과, 우리 모두의 백과사전 [ 컴퓨터구조 ] ISA (Instruction Set Architecture) links Assembly Language ","link":"https://chankoo.github.io/posts/isa/","section":"posts","tags":["CPU"],"title":"ISA"},{"body":"content ISA의 명령어를 문자화 시킨 저급 언어이다. 프로그래머가 기계어를 다룰 수 있도록 고안되었고, 기계어 명령어와 일대일 대응한다. 그래서 ISA 의존적이고, 하드웨어 이식성이 낮다.\nrefs [Chapter 7] Assembly Language - 어셈블리어, 어셈블러 links ISA ","link":"https://chankoo.github.io/posts/assembly-language/","section":"posts","tags":[],"title":"Assembly Language"},{"body":"content 어셈블리 언어(Assembly Language)를 기계어로 어셈블(assemble)하는 프로그램. 어셈블은 CPU의 ISA에 맞게 이루어진다.\n하나의 프로그램을 어셈블하면 여러 개의 소스 파일로 나뉠 수 있다. 이러한 파일(기계어 조각)을 합쳐서 하나의 실행 가능한 파일로 만드는 프로그램을 링커(Linker)라 하며, 그 파일의 코드와 데이터를 메모리에 올리고, 해당 프로그램의 시작 주소로 CPU를 제어하도록 하는 프로그램이 로더(Loader)이다.\nrefs [Chapter 7] Assembly Language - 어셈블리어, 어셈블러 links Assembly Language ISA ","link":"https://chankoo.github.io/posts/assembler/","section":"posts","tags":[],"title":"Assembler"},{"body":"content 파이썬 바이트코드 역 어셈블러. CPython의 바이트 코드를 역 어셈블하여 바이트 코드 레벨의 분석을 돕는 모듈이다.\nex)\ndef hi(x): x += 1 print(x) return x 위 정의에 따르면, 추상화한 바이트코드를 바이트코드로 바꾸는 것도 어셈블이라 볼 수 있다.\nrefs dis \u0026mdash; 파이썬 바이트 코드 역 어셈블러 — 파이썬 설명서 주석판 links Bytecode Assembler ","link":"https://chankoo.github.io/posts/dis/","section":"posts","tags":["python"],"title":"dis"},{"body":"content Transaction 간 격리 수준. DBMS는 다양한 수준의 Isolation Level을 제공하여 ACID의 Isolation 관점에서 엄격히 제한된 Transaction의 병행성 제약을 완화한다. 이상적으로 Transaction은 엄격히 격리해야 하지만, 실무적으로 걸림돌이 되기에, 격리 수준을 단계적으로 완화하는 Isolation Levels 를 정의하여 상황에 맞게 제공한다.\nSerializable - Isolation 제약을 지키는 수준으로 트랜잭션을 serial schedule 로 수행하여 다른 트랜잭션의 수행과 겹치는 시간이 없다. Repetable Reads - 반복해서 읽어도 같은 결과를 보여주는 수준으로, 반복 read 도중 커밋이 발생하여 값이 변해도 커밋 전 값을 읽어간다. Phantom Reads 는 발생한다. Read Comitted - 커밋된 결과라면 다 읽어버리는 수준 Read Uncomiteed - 죄다 읽는 수준. 더티 리드도 발생 refs Isolation (database systems) - Wikipedia links Transaction Serializability Phantom Reads 스레드와 잠금장치 발표자료.pdf ","link":"https://chankoo.github.io/posts/isolation-levels/","section":"posts","tags":["mysql","동시성"],"title":"Isolation Levels"},{"body":"content 기아 상태 여러 스레드나 프로세스가 자원을 점유하는 상황에서, 특정 스레드나 프로세스가 자원을 할당 받지 못하여 진행할 수 없는 상태\nrefs links ","link":"https://chankoo.github.io/posts/starvation/","section":"posts","tags":["동시성"],"title":"Starvation"},{"body":"content 교착 상태 한정된 자원을 공유하는 작업들이 서로의 종료를 기다리며 끝없이 대치하는 상태\n데드락의 필요 조건. 아래 4가지를 모두 만족시켜야 데드락이 발생한다.\n상호 배제(Mutual Exclusion) 점유 대기 비선점 순환 대기 refs links ","link":"https://chankoo.github.io/posts/deadlock/","section":"posts","tags":[],"title":"DeadLock"},{"body":"content 경쟁 상태 여러 스레드나 프로세스가 한 자원에 동시에 접근하고 조작하여 예상치 못한 결과(non deterministic)을 도출할 수 있는 상태. 즉, 스레드가 자원에 접근하는 타이밍에 결과가 영향 받는 상태를 의미한다\nThread 1 Thread 2 Integer value 0 read value ← 0 read value ← 0 increase value 0 increase value 0 write back → 1 write back → 1 refs Race condition - Wikipedia links ","link":"https://chankoo.github.io/posts/race-condition/","section":"posts","tags":["동시성"],"title":"Race Condition"},{"body":"","link":"https://chankoo.github.io/tags/c/","section":"tags","tags":null,"title":"C"},{"body":"content Portable Operation System Interface X UNIX OS 들이 공통적으로 제공해야할 API 규격이다. OS 간 이식성 높은 유닉스 응용프로그램을 만들기 위한 목적이다.\nC 언어 인터페이스인 시스템콜과 프로세스 환경, 파일 시스템, 압축 포맷 등 다양한 규격을 정의한다.\nrefs POSIX - 위키백과, 우리 모두의 백과사전 links ","link":"https://chankoo.github.io/posts/posix/","section":"posts","tags":["UNIX","C"],"title":"POSIX"},{"body":"","link":"https://chankoo.github.io/tags/unix/","section":"tags","tags":null,"title":"UNIX"},{"body":"content Pthreads. UNIX 기반 운영체제에서 멀티 스레딩을 위해 제공하는 api(Windows 도 제공해준다). C 에서 사용\nrefs links POSIX ","link":"https://chankoo.github.io/posts/posix-threads/","section":"posts","tags":["UNIX","C"],"title":"POSIX threads"},{"body":"content 일반적으로, 여러 스레드가 실행해도 정상적으로 동작(매번 같은 결과를 리턴)하는 코드(변수, 함수 등)를 스레드 안전 하다고 말한다.\n동시성을 다룰 땐 \u0026lsquo;스레드 안전\u0026rsquo; 해야하는데, 이를 구현하는 모델로 잠금장치, 함수형 프로그래밍, 클로저 등을 쓸 수 있겠다.\nrefs 7가지 동시성 모델 links 동시성 ","link":"https://chankoo.github.io/posts/thread-safe/","section":"posts","tags":["동시성","함수형프로그래밍"],"title":"Thread Safe"},{"body":"content refs 스레드와 잠금장치 발표자료.pdf links ","link":"https://chankoo.github.io/posts/7%EA%B0%80%EC%A7%80-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AA%A8%EB%8D%B8/","section":"posts","tags":["책","동시성"],"title":"7가지 동시성 모델"},{"body":"content 여러 일을 한꺼번에 실행하는 것. Parallelism. CPU의 영역에서 명세하자면, 여러 CPU가 스레드 하나씩을 동시에 실행하는 것이다.\n여러가지 일을 동시에 다루는 요구사항(동시성)을 해결하는 방법이기에 해법의 속성을 내포한다. 실제로 순차적 프로그래밍의 한계를 넘어서는 기술이다.\nrefs 7가지 동시성 모델 links 동시성 ","link":"https://chankoo.github.io/posts/%EB%B3%91%EB%A0%AC%EC%84%B1/","section":"posts","tags":["CPU","동시성"],"title":"병렬성"},{"body":"content Dependency Inversion Principle(의존성 역전 원칙) 더 구체적인(하위 계층) 모듈에 의존하는 일반적(절차적)인 의존성의 흐름을 역전 시켜 더 추상적인(상위 계층) 모듈에 의존하도록해야한다.\n추상 팩토리 패턴이 대표적이다. 객체 생성을 위해 구체 팩토리에 의존(요소 -\u0026gt; 팩토리)하는 것이 아니라, 추상 팩토리에 의존(요소 -\u0026gt; 추상 팩토리 $\\Leftarrow$ 구체 팩토리)하는 것이다.\nrefs 클린 아키텍처 links SOLID 추상 팩토리 패턴 ","link":"https://chankoo.github.io/posts/dip/","section":"posts","tags":["SOLID"],"title":"DIP"},{"body":"content Dependency Injection(의존성 주입) 클라이언트에서 사용할 의존성을 외부에서 넣어주는 일\nrefs links ","link":"https://chankoo.github.io/posts/di/","section":"posts","tags":[],"title":"DI"},{"body":"content Inversion Of Control(제어 역전) 클라이언트(프로그래머)가 직접 사용할 의존성을 제어하는 상황(일반적, 절차적) -\u0026gt; 누군가(프레임워크)가 의존성을 정해주는(DI, DIP 등으로) 상황(역전)\nrefs 학습 페이지 [Study]IoC, DI, DIP 개념 잡기 - 기록은 기억을 지배한다 links DI DIP ","link":"https://chankoo.github.io/posts/ioc/","section":"posts","tags":["디자인패턴","spring"],"title":"IOC"},{"body":"","link":"https://chankoo.github.io/tags/spring/","section":"tags","tags":null,"title":"spring"},{"body":"","link":"https://chankoo.github.io/tags/react/","section":"tags","tags":null,"title":"react"},{"body":"content 함수형 컴포넌트에서 이펙트를 정의하는 훅. 렌더링 후 리액트가 내부의 함수를 실행한다. 리액트는 각 렌더링 마다 deps 배열을 비교하여 이펙트 내 함수 실행 여부를 따진다.\nrefs links 함수형 컴포넌트 ","link":"https://chankoo.github.io/posts/useeffect/","section":"posts","tags":["react"],"title":"UseEffect"},{"body":"content react의 함수형 컴포넌트는 당연하게도 함수형 프로그래밍의 패러다임을 따른다. 컴포넌트 내 state는 불변하며, setState는 새 state로 컴포넌트 함수를 다시 호출한다. 그때마다 다시 렌더링되는 것이고 각 렌더링은 고유의 함수(핸들러, 이펙트)를 가진다.\nrefs useEffect 완벽 가이드 — Overreacted links ","link":"https://chankoo.github.io/posts/%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/","section":"posts","tags":["react","함수형프로그래밍"],"title":"함수형 컴포넌트"},{"body":"content 광고 매체를 통해 유입된 어플리케이션 유저의 데이터를 다시 광고 매체로 돌려주는 일. 보통 어플리케이션 제공자 입장에서 postback 기능이 있는 솔루션(MMP)가 필요한데, 1) 유저 데이터를 가지고 이용중인 광고를 최적화 하려는 목적과 2) 광고 매체 마다 API 스펙이 제각각이어서 대응이 어려운 문제 때문이다.\nrefs links webhook ","link":"https://chankoo.github.io/posts/postback/","section":"posts","tags":["광고"],"title":"postback"},{"body":"content 여러 일을 한꺼번에 다루는 것. Concurrency. CPU의 영역에서 명세하자면, CPU는 하나인데 여러 스레드에서 각각의 제어흐름을 다루고 있는 상황이다.\n순차적 프로그래밍의 한계를 넘어서려는 시도이나, 여러가지 일을 동시에 다루는 척(병렬 착각, 병행성)하는 것이기에 그자체로 문제의 속성을 내포한다.\nrefs 7가지 동시성 모델 links 병렬성 ","link":"https://chankoo.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1/","section":"posts","tags":["CPU","동시성"],"title":"동시성"},{"body":"content refs links ","link":"https://chankoo.github.io/posts/%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/","section":"posts","tags":["책"],"title":"클린 아키텍처"},{"body":"","link":"https://chankoo.github.io/tags/numpy/","section":"tags","tags":null,"title":"numpy"},{"body":"content 파이썬의 list 보다 np array가\n더 빠르다 element로 PyObject 대신 value를 들고 있어 직접 접근할 수 있다. 메모리 효율이 좋다. element의 크기가 작다 PyObject - 4 for type pointer, 4 for reference count, 4 for value \u0026ndash; and the memory allocators rounds up to 16 value - single-precision numbers takes 4 bytes each, double-precision ones, 8 bytes 동적배열 아니어서 크기가 고정이며 정적할당하여 element 타입이 고정이다 refs links PyObject Dynamic Array ","link":"https://chankoo.github.io/posts/why-numpy-array/","section":"posts","tags":["python","numpy","메모리"],"title":"why numpy array"},{"body":"content 파이썬(CPython)에서는 아래 두가지 객체에 대해 가비지 컬렉션을 실행한다.\nPyObject의 ref count가 0\n순환 참조가 발생했고 그 외의 참조는 없음\n예제\nl = [] l.append(l) del l refs Python GC가 작동하는 원리 links 가비지 컬렉션 PyObject ","link":"https://chankoo.github.io/posts/python-gc/","section":"posts","tags":["python","메모리"],"title":"Python-GC"},{"body":"content 일반적인 CPython 구현체를 가정했을때, 파이썬의 메모리 관리 알고리즘은 C로 쓰여졌고, 이해를 위해서는 CPython 의 내부 구현을 알아야한다.\n모든 파이썬 객체는 PyObject라는 c struct 를 확장하여 가지고 있다. PyObject는 ob_type 포인터 객체의 타입 오브젝트를 가리키고, ob_refcnt를 통해 레퍼런스 카운팅을 한다.\nrefs Memory Management in Python – Real Python links CPython ","link":"https://chankoo.github.io/posts/pyobject/","section":"posts","tags":["python","메모리"],"title":"PyObject"},{"body":"content 런타임에 원시코드를 읽어가며 기계어로 실시간 컴파일하는 기술. 그 결과 JIT 컴파일을 활용하면 정적 컴파일만큼 빠른 속도로 돌면서도, 인터프리터 언어만큼 잦은 인터랙션을 제공할 수 있다.\nrefs -JIT 컴파일 - 위키백과, 우리 모두의 백과사전\nlinks 인터프리터 ","link":"https://chankoo.github.io/posts/jit-%EC%BB%B4%ED%8C%8C%EC%9D%BC/","section":"posts","tags":[],"title":"JIT 컴파일"},{"body":"content 프로그래밍 언어(일반적으로 고급 언어)를 읽고 바로 실행하는 프로그램 또는 환경.\n인터프리터는 아래 세가지 중 적어도 하나의 일을 한다.\n소스코드를 직접 실행한다. 소스코드를 더 효율적인 중간 코드(바이트코드)로 변환하고 이를 실행한다. (인터프리터 시스템의 일부인) 컴파일러가 사전에 컴파일한 파일의 실행을 호출한다. 현대의 많은 인터프리터가 JIT 컴파일 과 같은 기술을 지원하여서 컴파일러와의 엄격한 구분은 의미를 잃었다.\nrefs 인터프리터 - 위키백과, 우리 모두의 백과사전 links 컴파일러 JIT 컴파일 Bytecode ","link":"https://chankoo.github.io/posts/%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0/","section":"posts","tags":[],"title":"인터프리터"},{"body":"content 고급 프로그래밍 언어를 저급 프로그래밍 언어(어셈블리 언어, 기계어 등)로 바꾸어 출력하는 번역 프로그램.\nrefs 컴파일러 - 위키백과, 우리 모두의 백과사전 links ","link":"https://chankoo.github.io/posts/%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC/","section":"posts","tags":[],"title":"컴파일러"},{"body":"content Cython: C-Extension for Python C로 파이썬의 확장 모듈을 구현하기 위해 설계한 컴파일 언어. C와 파이썬의 superset이며 표준 C/C++ 컴파일러를 이용한다. 이러한 특성은 파이썬 언어의 높은 생산성을 활용하면서 실행 속도의 향상을 가져온다.\nrefs 사이썬 - 위키백과, 우리 모두의 백과사전 links CPython 컴파일러 ","link":"https://chankoo.github.io/posts/cython/","section":"posts","tags":["python","C"],"title":"Cython"},{"body":"content C로 구현한 파이썬 인터프리터 시스템. 파이썬 언어로 쓰인 스크립트를 바이트코드(.pyc, pycache)로 컴파일한 후, 인터프리터로 실행한다.\nrefs CPython 파헤치기: 따라 하면서 이해하는 파이썬 내부의 동작 원리 – 도서출판 인사이트 links 인터프리터 Bytecode ","link":"https://chankoo.github.io/posts/cpython/","section":"posts","tags":["python"],"title":"CPython"},{"body":"","link":"https://chankoo.github.io/tags/frontend/","section":"tags","tags":null,"title":"frontend"},{"body":"","link":"https://chankoo.github.io/tags/ios/","section":"tags","tags":null,"title":"iOS"},{"body":"content View -\u0026gt; ViewModel -\u0026gt; Model 의 구조. View 를 그리기 위한 데이터와 비즈니스 로직을 ViewModel에 모두 담아 View와 Model 결합을 끊는다. MVC(UIKit) 를 이용하던 iOS 개발의 대세 흐름이 MVVM(SwiftUI)을 이용하는 것으로 변했는데, MVC에 비해 각 계층이 더 잘 분리되어 유지보수와 테스트가 더 용이하다. MVVM은 View가 ViewModel을, ViewModel이 Model을 소유하는 방식인데, MVC의 ViewController가 Model과 View를 모두 떠맡아 비대해지는 이슈를 해결하는 구조이다. 화면을 VC 단위로 구성하는 것이 아니라, View가 필요한 비즈니스 로직(ViewModel)을 가져와 사용하는 것이다.\n계층을 분리하는 구조를 더 자세히 이해하려면 Reactive Programming(Data Binding)과 커맨드 패턴에 대한 이해가 필요하다.\nrefs iOS 개발 — MVVM 패턴이란? UIKit의 MVC와의 비교 | by Heechan | HcleeDev | Medium links Reactive Programming 커맨드 패턴 ","link":"https://chankoo.github.io/posts/mvvm/","section":"posts","tags":["디자인패턴","frontend","iOS"],"title":"MVVM"},{"body":"content 리액트에서 로직과 뷰 컴포넌트를 분리하는 패턴. 데이터를 가져오고 가공하는 컨테이너 컴포넌트와, 데이터를 렌더링하는 프레젠터 컴포넌트로 나눈다.\naka Smart \u0026amp; Dumb conponents 대개 컨테이너는 렌더링하는 컴포넌트 외에 다른 ui는 렌더링하지 않으며, 프레젠터는 컨테이너로 부터 데이터를 받아 단순히 렌더링 한다.\n관심사 분리를 통해 재사용성 높은 순수한 프레젠터 컴포넌트를 만드는 이점이 있으며, 테스트가 쉬워서 험블 객체 패턴을 따랐다고도 볼 수 있겠다.\n반면 데이터 가져오는 역할을 hook이 점차 대체하며, 굳이 컨테이너 컴포넌트를 두는게 불필요하다는 의견도 늘고있다.\nrefs Container/Presentational Pattern links 험블 객체 패턴 ","link":"https://chankoo.github.io/posts/container-presenter-%ED%8C%A8%ED%84%B4/","section":"posts","tags":["디자인패턴","react"],"title":"Container-Presenter 패턴"},{"body":"content python 의 list 는 dynamic array이다. 런타임에 element를 추가할때, 리스트에 할당된 메모리 공간이 모자라면 리스트 크기를 늘린다. 그런데 dynamic array도 엄연한 array 이기에 \u0026rsquo;element 가 연속된 메모리 공간을 점유한다\u0026rsquo;는 제약을 따라야한다. 그래서 python(cpython)은 요소가 추가되어 리스트 크기가 변해야할 때, 전체 list를 복사하여 더 큰(2의 거듭제곱) 공간에 통째로 재할당 한다.\n이는 시간 복잡도 계산에 영향을 준다. list 에 요소를 더하는 append 나 insert 연산의 시간 복잡도를 계산할 때 메모리 재할당 시간까지 고려해야 한다는 의미다. 동적 배열에 요소를 추가할때 메모리 재할당이 필요하다면, O(N) 시간이 필요하다(분할 상환하여 계산한 일반적인 시간 복잡도는 O(1)). 또한 list.pop(k) 역시 k번째 요소를 가져온 뒤 메모리 재할당이 필요하므로 O(N)이다.\nrefs Python Bulit-in Time Complexity: List · Enfow\u0026rsquo;s Blog links 분할 상환 분석 ","link":"https://chankoo.github.io/posts/dynamic-array/","section":"posts","tags":["메모리","python"],"title":"Dynamic Array"},{"body":"content 생각 정리를 위한 제텔카스텐 cherry-pick\n가억과 생각을 탐색하는 자료구조\n노트 작성 원칙\natomic한 아이디어를 노트로 작성한다. 임시 노트를 작성하고 영구 노트로 옮긴다. 노트 간 연결은 많을수록 좋다. 영구 노트 작성 원칙\n내 글로 다시 쓴다. 출판을 전제로 쓴다. 분량을 제한한다. 페이지 작성법\n영구 노트의 글감을 정리하여 한 편의 글을 쓴다. Cmd + Shift + E 단축키로 로컬 디렉토리(pages)에 내보낸다. pages/deploy.sh 로 publish 한다. refs 4. 옵시디안은 제텔카스텐을 위해 태어났다. 제텔카스텐 개념과 기본 세팅[한글 자막] - YouTube links 노트 템플릿 ","link":"https://chankoo.github.io/posts/%EC%A0%9C%ED%85%94%EC%B9%B4%EC%8A%A4%ED%85%90/","section":"posts","tags":[],"title":"제텔카스텐"},{"body":"","link":"https://chankoo.github.io/series/","section":"series","tags":null,"title":"Series"}]