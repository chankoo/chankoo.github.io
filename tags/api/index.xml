<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>api on chankoo</title>
    <link>https://chankoo.github.io/tags/api/</link>
    <description>Recent content in api on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Jun 2023 16:30:05 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API 조합 패턴</title>
      <link>https://chankoo.github.io/posts/api-%EC%A1%B0%ED%95%A9-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Thu, 01 Jun 2023 16:30:05 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/api-%EC%A1%B0%ED%95%A9-%ED%8C%A8%ED%84%B4/</guid>
      <description>
        
          
            content (주로)MSA에서 프로바이더 서비스들이 제공하는 데이터를 조합하여 한번에 제공하는 API 조합기를 두는 패턴
설계
API 조합기로 둘 컴포넌트 선정 클라이언트 간단하지만, 클라이언트가 외부 네트워크에 존재하는 경우 느리다 API 게이트웨이 일반적인 방법으로 API 게이트웨이 패턴이라 불림 스탠드 얼론 서비스 &amp;lsquo;주문 검색 서비스&amp;rsquo; 와 같은 서비스를 두어 조합기 역할을 맡기는 방법 효율적인 조합 로직 프로바이더 서비스 순차 호출에 따른 지연 시간을 줄이는 것이 핵심 리액티브 프로그래밍을 권장 refs 마이크로서비스 패턴 links API Gateway 패턴 리액티브 프로그래밍 
          
          
        
      </description>
    </item>
    
    <item>
      <title>API Gateway 패턴</title>
      <link>https://chankoo.github.io/posts/api-gateway-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Thu, 18 May 2023 20:29:43 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/api-gateway-%ED%8C%A8%ED%84%B4/</guid>
      <description>
        
          
            content API Gateway Pattern 을 정확히 이해하자 MSA에 API Gateway Pattern이 필수적임 API Gateway Pattern은 API Gateway Framework와는 무관함 내부 api를 제공(단순 라우팅)할 용도로 API Gateway Framework를 쓰지말자 -&amp;gt; controller와 facade가 없는 프레젠테이션 레이어를 구현하게됨 인가 로직이 비즈니스 레이어(각각의 마이크로서비스)에 들어가야해서 오염됨 로직 구현의 책임을 잘못된 곳에 전가함 클라이언트가 여러 로직을 직접 호출하여 조합하거나 특정 서비스가 자신의 도메인인 것처럼 다른 서비스를 호출하여 구현하는 문제 클라이언트와 비즈니스 레이어의 강결합 클라이언트 성능 저하 내부 서비스의 프로토콜 제약 클라이언트에 응답할 수 있는 Http api 로 고정됨 API Gateway Pattern 의 종류 Edge Gateway(중앙 집중식) 가장 일반적인 패턴으로 게이트웨이가 거의 모든 것을 처리함.
          
          
        
      </description>
    </item>
    
    <item>
      <title>gRPC</title>
      <link>https://chankoo.github.io/posts/grpc/</link>
      <pubDate>Tue, 29 Nov 2022 19:33:00 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/grpc/</guid>
      <description>
        
          
            content google에서 개발한 RPC(Remote Procedure Call) 프레임워크.
기존 RPC처럼, 네트워크 통신이 필요한 요청을 로컬에서 호출하는 것처럼 도와주는 프로토콜이다. HTTP/2 를 사용하며 프로토콜 버퍼(ProtoBuf)를 이용해 통신 효율을 높이는 특징이 있다.
일반적인 http 기반 API(REST 등) 보다 더 빠르고(5배 가량), HTTP2의 기능을 사용할 수 있는 것이 장점이다.
refs [네이버클라우드 기술&amp;amp;경험] 시대의 흐름, gRPC 깊게 파고들기 #1 | by NAVER CLOUD PLATFORM | NAVER CLOUD PLATFORM | Medium What is RPC? gRPC Introduction. - YouTube links HTTP2 프로토콜 버퍼 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
