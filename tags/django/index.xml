<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on chankoo</title>
    <link>https://chankoo.github.io/tags/django/</link>
    <description>Recent content in django on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Nov 2023 23:08:32 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Active Record</title>
      <link>https://chankoo.github.io/posts/active-record/</link>
      <pubDate>Wed, 22 Nov 2023 23:08:32 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/active-record/</guid>
      <description>
        
          
            content DB row의 wrapper 객체로 데이터에 대한 접근과 도메인 로직을 함께 구현하는 방식이다.
Django Model이 Active Record를 사용한다.
refs P of EAA: Active Record links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>DBCP</title>
      <link>https://chankoo.github.io/posts/dbcp/</link>
      <pubDate>Wed, 22 Nov 2023 12:01:24 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dbcp/</guid>
      <description>
        
          
            DB Connection Pool. DB와의 커넥션 풀을 어플리케이션 단에 미리 만들어두는 것이다. DB와 커넥션을 맺고 끊기 위해 매번 TCP 통신하는 비용을 줄인다.
mysql 기준으로 성능에 중요한 설정 max_connections: 클라이언트와 맺을 수 있는 최대 커넥션 수 connect_timeout: 커넥션을 맺기 위해 기다리는 최대 시간(기본값 10초) wait_timeout: inactive 커넥션을 얼마까지 기다린 뒤 close 할지 설정(기본값 28800 - 8시간). 연결을 맺고 다음 쿼리까지 기다리는 최대 시간 django 기준으로 성능에 중요한 설정 django는 커넥션 풀을 지원하지 않고, 요청마다 커넥션을 맺고 끊는다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>파이썬 디스크립터</title>
      <link>https://chankoo.github.io/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0/</link>
      <pubDate>Thu, 20 Oct 2022 21:18:18 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%94%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%84%B0/</guid>
      <description>
        
          
            매직 메서드 get, set, delete 중 하나 이상을 정의한 객체를 의미하며, 클래스 변수에 저장한 객체(디스크립터 객체)의 어트리뷰트를 제어하는 기능을 한다. 즉, 디스크립터를 이용하면 객체 어트리뷰트의 lookup, storage, and deletion을 커스터마이징할 수 있다.
보통 인스턴스 데이터에 대한 접근을 관리하는 용도로 쓰인다. ex) django.models.fields.FileField 의 FileDescriptor -&amp;gt; FileField를 가져올때 항상 FieldFile을 내놓도록 제어
refs [Chapter .06] 디스크립터로 더 멋진 객체 만들기 - 파이썬 틀린코드 (Feat. 파이썬 클린코드) [Python] 디스크립터(Descriptor) links FileField 
          
          
        
      </description>
    </item>
    
    <item>
      <title>FileField</title>
      <link>https://chankoo.github.io/posts/filefield/</link>
      <pubDate>Thu, 20 Oct 2022 19:25:34 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/filefield/</guid>
      <description>
        
          
            업로드한 파일을 위한 Django Field 객체로 DB 테이블의 컬럼을 추상화했다. 파일을 추상화한 FieldFile 객체의 wrapper이다. 생성을 위해 파일 시스템을 추상화한 Storage 의 구현체와 path로 지정할 문자열(upload_to)가 필요하다.
FileField 를 get 하면 항상 FieldFile 객체를 가져오는데, 이는 파이썬의 디스크립터를 이용하여 기능한다. FileField에 descriptor_class로 FileDescriptor 객체가 선언되어있어서, FileField 를 가져올때 Dynamic lookup 을 통해 FieldFile을 내어놓는 것이다.
refs Model field reference | Django documentation | Django links 파일 시스템 파이썬 디스크립터 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
