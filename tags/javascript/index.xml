<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on chankoo</title>
    <link>https://chankoo.github.io/tags/javascript/</link>
    <description>Recent content in javascript on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 23 Jan 2024 17:13:57 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Call by Sharing</title>
      <link>https://chankoo.github.io/posts/call-by-sharing/</link>
      <pubDate>Tue, 23 Jan 2024 17:13:57 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/call-by-sharing/</guid>
      <description>
        
          
            인자의 레퍼런스(또는 포인터)를 복사해서 사용하는 함수 호출 방식이다.
파이썬에서는 모든 타입을 Call by Sharing으로 전달한다. print_arg를 실행하면 인자로 전달된 객체의 레퍼런스 카운트가 증가(2 -&amp;gt; 4)함을 확인할 수 있다.
// python import sys def print_arg(arg): print(id(arg), sys.getrefcount(arg)) a = 9999 print(id(a), sys.getrefcount(a)) # 4416168912 2 print_arg(a) # 4416168912 4 b = [1,2,3] print(id(b), sys.getrefcount(b)) # 4416560768 2 print_arg(b) # 4416560768 4 js 에서는 참조 타입을 인자로 전달할때 사용된다(원시 타입은 Call by value로 동작).
          
          
        
      </description>
    </item>
    
    <item>
      <title>레퍼런스</title>
      <link>https://chankoo.github.io/posts/%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4/</link>
      <pubDate>Tue, 23 Jan 2024 13:49:42 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4/</guid>
      <description>
        
          
            언어마다 구현의 차이는 있지만, &amp;lsquo;메모리에 저장된 실제 데이터를 가리키는 변수&amp;rsquo; 를 의미힌다.
파이썬에서 레퍼런스는 객체를 가리키는 변수이다. 해당 객체가 레퍼런스 카운팅을 통해 레퍼런스를 관리한다. 레퍼런스는 스택 영역에, 객체는 힙 영역에 각각 저장한다. 할당되는 순간(x = 9999999999), 레퍼런스가 힙 영역의 객체를 가리키며 객체의 레퍼런스 카운트를 증가시킨다. 다른 레퍼런스를 선언하고 기존 레퍼런스를 할당(y = x)해도 같은 일이 발생한다. 새로 만든 레퍼런스는 기존 레퍼런스가 가리키던 객체를 가리키게 되고(y -&amp;gt; 9999999999), 기존 객체의 레퍼런스 카운트가 증가한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Event Loop</title>
      <link>https://chankoo.github.io/posts/event-loop/</link>
      <pubDate>Tue, 25 Oct 2022 23:23:22 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/event-loop/</guid>
      <description>
        
          
            싱글 스레드에서 요청을 비동기로 처리하기 위해 사용하는 루프.
(python asyncio에서) Asyncio Event Loop (gevent에서) I/O 요청시 커널에 요청을 주고 커널로 부터 응답 받은 이벤트를 처리하기 위해 돌고있는 루프 유저 영역 요청 -&amp;gt; 이벤트 루프 -&amp;gt; 이벤트 루프 응답 -&amp;gt; 대기하며 진행 커널 영역 블락 -&amp;gt; 이벤트 발생 -&amp;gt; 이벤트 루프에 노티 -&amp;gt; 대기 중인 것을 실현 (javascript에서) 콜백 큐에서 콜백 함수를 꺼내 콜 스택에 넣어 주는 루프 refs DEVIEW 2014 [JS] 도대체 이벤트 루프가 뭔가요?
          
          
        
      </description>
    </item>
    
    <item>
      <title>Iterator</title>
      <link>https://chankoo.github.io/posts/iterator/</link>
      <pubDate>Tue, 11 Oct 2022 23:36:52 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/iterator/</guid>
      <description>
        
          
            특정 집합 객체 요소에 순차적으로 접근 가능하도록 구현해놓은 객체. Iterator 패턴을 따라서 내부를 노출하지 않고 집합 객체의 구현에 종속되지 않아야한다.
Iterator 를 제공하는 객체는 Iterator Protocol 을 따랐다고 표현하는데, 이는 언어마다 상이하다. 에를 들어 javascript 에선 Iteration Protocol 하위에 Iteration Protocol 과 Iterator Protocol이 존재한다.
구현은 프로그래밍 언어마다 다양할 수 있다. 보통 Iterable 객체와 묶여서 구현한다. python과 java 모두 Iterable 객체로 부터 Iterator를 얻으며(iter, iterator()), 다음 요소를 가져오는 메소드를 제공한다(next, next()).
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
