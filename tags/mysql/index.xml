<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on chankoo</title>
    <link>https://chankoo.github.io/tags/mysql/</link>
    <description>Recent content in mysql on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 May 2024 12:40:02 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>분산DB 유일 ID 생성(feat. Django)</title>
      <link>https://chankoo.github.io/posts/%EB%B6%84%EC%82%B0db-%EC%9C%A0%EC%9D%BC-id-%EC%83%9D%EC%84%B1feat.-django/</link>
      <pubDate>Thu, 23 May 2024 12:40:02 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%B6%84%EC%82%B0db-%EC%9C%A0%EC%9D%BC-id-%EC%83%9D%EC%84%B1feat.-django/</guid>
      <description>
        
          
            유일 ID 생성 방식 일반적으로 분산 시스템에서 유일 ID를 생성하는 방법은 아래와 같다.
DBMS Auto Increment 옵션 조정 UUID 티켓서버 Snowflake ID 1. Auto Increment 옵션 조정 Auto Increment(Sequence) 은 대부분의 DBMS에 구현된 기능으로, 1씩 증가하는 값을 내놓도록 보장한다. 단일 DB 환경에서는 유일 ID를 쉽게 생성할 수 있다.
마스터 노드가 여러개인 분산 환경이 문제인데, mysql과 같은 DBMS는 이 Auto Increment의 증가폭과 시작값 옵션을 조정하여 분산 환경 내 유일한 ID를 생성할 수 있다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>분산DB 유일 ID 생성(feat. Django)</title>
      <link>https://chankoo.github.io/posts/%EB%B6%84%EC%82%B0db-%EC%9C%A0%EC%9D%BC-id-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Thu, 23 May 2024 12:40:02 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%B6%84%EC%82%B0db-%EC%9C%A0%EC%9D%BC-id-%EC%83%9D%EC%84%B1/</guid>
      <description>
        
          
            유일 ID 생성 방식 일반적으로 분산 시스템에서 유일 ID를 생성하는 방법은 아래와 같다.
DBMS Auto Increment 옵션 조정 UUID 티켓서버 Snowflake ID 1. Auto Increment 옵션 조정 Auto Increment(Sequence) 은 대부분의 DBMS에 구현된 기능으로, 1씩 증가하는 값을 내놓도록 보장한다. 단일 DB 환경에서는 유일 ID를 쉽게 생성할 수 있다.
마스터 노드가 여러개인 분산 환경이 문제인데, mysql과 같은 DBMS는 이 Auto Increment의 증가폭과 시작값 옵션을 조정하여 분산 환경 내 유일한 ID를 생성할 수 있다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>DB 인덱스와 정렬</title>
      <link>https://chankoo.github.io/posts/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%A0%95%EB%A0%AC/</link>
      <pubDate>Sun, 28 Apr 2024 12:02:40 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/db-%EC%9D%B8%EB%8D%B1%EC%8A%A4%EC%99%80-%EC%A0%95%EB%A0%AC/</guid>
      <description>
        
          
            B-Tree 계열 인덱스 사용시 정렬에 인덱스를 사용할 수 있으며, 그 효과가 인덱스 유지 비용보다 커야한다.
Mysql에서 쿼리에 order by가 사용되면 아래 3가지 중 하나로 처리한다. 아래로 갈수록 느리다.
인덱스 사용한 정렬 정렬 목적 인덱스가 있어야함. (정렬 대상 컬럼이 테이블의 첫번째 컬럼이며 , 정렬 되어있어야 함) B-Tree 계열 인덱스에서만 사용 File Sort SortBuffer에서 테이블을 정렬하는 방식 조인이 필요한 경우, 드라이빙 테이블(정렬 필요 테이블)을 먼저 정렬하고 조인한다. Using temporary; File Sort 임시 테이블을 만들고, 임시 테이블을 소트버퍼에서 정렬하는 방식 조인 후에 정렬이 필요한 경우이다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>전문 검색 인덱스</title>
      <link>https://chankoo.github.io/posts/%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link>
      <pubDate>Mon, 27 Nov 2023 15:57:04 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%A0%84%EB%AC%B8-%EA%B2%80%EC%83%89-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid>
      <description>
        
          
            컬럼 텍스트의 전체 값을 인덱싱해서 키워드 검색(full text search)을 용이하게 하는 방법으로 stopword, n-gram 등의 전문 검색 알고리즘을 사용한다.
refs Real MySQL links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>&lt;시스템 디자인 연습&gt; 피드 서비스 3 - DB 병목</title>
      <link>https://chankoo.github.io/pages/%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%97%B0%EC%8A%B5-%ED%94%BC%EB%93%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-3-db-%EB%B3%91%EB%AA%A9/</link>
      <pubDate>Sun, 26 Nov 2023 13:54:34 +0900</pubDate>
      
      <guid>https://chankoo.github.io/pages/%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%97%B0%EC%8A%B5-%ED%94%BC%EB%93%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-3-db-%EB%B3%91%EB%AA%A9/</guid>
      <description>
        
          
            작업 이번에는 피드 서비스에서 주된 이슈인 Fanout 시나리오를 실험했다. 유저가 게시글을 작성하면 해당 글을 500명의 친구 피드로 전송하는 것이다. 이는 한 유저 당 501개의 create 요청을 발생시키는 고부하 작업이다.
목표 500 RPS(약 250,000 QPS) 를 견디는 시스템을 만든다. 가상 사용자(VU) 500명을 설정하고, 1초 간격으로 3분 동안 요청을 지속했다.
결과 요약 DB의 옵션을 이해하고 우선적으로 DB 성능을 튜닝하는 것이 중요하다. 그래도 DB가 병목일 땐 캐시와 비동기 작업을 적극적으로 활용하자. 환경 AWS
          
          
        
      </description>
    </item>
    
    <item>
      <title>DBCP</title>
      <link>https://chankoo.github.io/posts/dbcp/</link>
      <pubDate>Wed, 22 Nov 2023 12:01:24 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dbcp/</guid>
      <description>
        
          
            DB Connection Pool. DB와의 커넥션 풀을 어플리케이션 단에 미리 만들어두는 것이다. DB와 커넥션을 맺고 끊기 위해 매번 TCP 통신하는 비용을 줄인다.
mysql 기준으로 성능에 중요한 설정 max_connections: 클라이언트와 맺을 수 있는 최대 커넥션 수 connect_timeout: 커넥션을 맺기 위해 기다리는 최대 시간(기본값 10초) wait_timeout: inactive 커넥션을 얼마까지 기다린 뒤 close 할지 설정(기본값 28800 - 8시간). 연결을 맺고 다음 쿼리까지 기다리는 최대 시간 django 기준으로 성능에 중요한 설정 django는 커넥션 풀을 지원하지 않고, 요청마다 커넥션을 맺고 끊는다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Mysql 인덱스</title>
      <link>https://chankoo.github.io/posts/mysql-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</link>
      <pubDate>Tue, 21 Nov 2023 19:20:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/mysql-%EC%9D%B8%EB%8D%B1%EC%8A%A4/</guid>
      <description>
        
          
            mysql의 InnoDB는 아래와 같은 구조로 인덱스를 생성한다. 해당 인덱스는 B-Tree 로 기본키를 저장하고, 기본키는 데이터에 접근한다. 이때 기본키와 데이터는 같은 공간에 저장한다. 이를 클러스터드 인덱스(테이블이 곧 기본키 인덱스)라고 부른다.
refs [MySQL] B-Tree로 인덱스(Index)에 대해 쉽고 완벽하게 이해하기 - MangKyu&amp;rsquo;s Diary 데이터 중심 애플리케이션 설계 links B-Tree Hash 인덱스 전문 검색 인덱스 Real MySQL 
          
          
        
      </description>
    </item>
    
    <item>
      <title>B-Tree</title>
      <link>https://chankoo.github.io/posts/b-tree/</link>
      <pubDate>Tue, 21 Nov 2023 18:54:17 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/b-tree/</guid>
      <description>
        
          
            BST(Binary Search Tree)를 일반화한 자료구조로 2개 이상의 자식 노드를 갖는 Balanced Tree이다.
B Tree 류 자료구조는 DB 인덱스로 많이 쓰인다. (Balanced BST인)AVL Tree, RB Tree에 비해 자식 노드 개수가 많아 디스크 접근 수가 적음 블록 단위로 메모리에 적재하는 OS 특성도 효율적으로 활용 B Tree 인덱스의 성능은 키의 크기, 키의 카디널리티, 레코드 대비 인덱스 스캔의 범위 등 다양한 요소에 영향 받는다.
디스크 I/O로 데이터를 가져오는 단위인 블록의 크기는 고정(mysql은 16KB)인데, 키의 크기가 커지면 한블록에 저장하는 키의 개수가 적어진다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>타임존 이슈</title>
      <link>https://chankoo.github.io/posts/%ED%83%80%EC%9E%84%EC%A1%B4-%EC%9D%B4%EC%8A%88/</link>
      <pubDate>Wed, 18 Jan 2023 11:31:14 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%83%80%EC%9E%84%EC%A1%B4-%EC%9D%B4%EC%8A%88/</guid>
      <description>
        
          
            datetime이 타임존과 엮여 표현되는 방식을 이해하고 헷갈리지 말자
db 타임존 설정은 보통 SYSTEM의 타임존 설정을 따르게 되어있음 SELECT @@global.time_zone; db가 돌고있는 시스템(보통 docker의 커널)의 타임존 설정은 대개 UTC +0000임. 때문에 DB의 타임존은 UTC를 따르는 것이 보통이고 표준이다.
db에 저장된 예시 데이터를 보면
한눈에 봐도 이른시간이 찍혀있고, UTC 기준임
datetime 데이터는 불변이라는 것을 잊으면 안된다. 데이터를 표현하는 방법이 타임존에 따라 여러가지 인 것이다.
DB가 UTC를 따르고, Django에서 TIME_ZONE = &#39;Asia/Seoul&#39;; USE_TZ = True 로 지정한다면
          
          
        
      </description>
    </item>
    
    <item>
      <title>Isolation Levels</title>
      <link>https://chankoo.github.io/posts/isolation-levels/</link>
      <pubDate>Sun, 09 Oct 2022 12:37:01 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/isolation-levels/</guid>
      <description>
        
          
            Transaction 간 격리 수준
DBMS는 다양한 수준의 Isolation Level을 제공하여 ACID의 Isolation 관점에서 엄격히 제한된 Transaction의 병행성 제약을 완화한다. 이상적으로 Transaction은 엄격히 격리해야 하지만, 실무적으로 걸림돌이 되기에, 격리 수준을 단계적으로 완화하는 Isolation Levels 를 정의하여 상황에 맞게 제공한다.
Serializable - Isolation 제약을 지키는 수준으로 트랜잭션을 serial schedule 로 수행하여 다른 트랜잭션의 수행과 겹치는 시간이 없다. Repeatable Reads 반복해서 읽어도 같은 결과를 보여주는 수준으로, 반복 read 도중 커밋이 발생하여 값이 변해도 커밋 전 값을 읽어간다.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
