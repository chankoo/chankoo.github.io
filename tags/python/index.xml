<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on chankoo</title>
    <link>https://chankoo.github.io/tags/python/</link>
    <description>Recent content in python on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 28 Nov 2023 15:55:32 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gevent</title>
      <link>https://chankoo.github.io/posts/gevent/</link>
      <pubDate>Tue, 28 Nov 2023 15:55:32 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gevent/</guid>
      <description>
        
          
            content 코루틴 기반의 파이썬 라이브러리로 고성능 I/O를 위한 동시성을 지원한다.
greenlet 이라는 경량 스레드(코루틴)와 event loop를 이용하여 넌블러킹 &amp;amp; 비동기 I/O를 지원한다. monkey patching을 이용해 표준 라이브러리의 구현을 gevent의 구현으로 바꿔치기하는 방식으로 동작한다.
파이썬이 표준으로 제공하는 구현이 아니고 어디까지나 monkey patching(흑마법) 이기에 한계가 분명하다. (대표적으로 mysqlclient는 gevent 와 호환되지 않는다)
refs What is gevent? - gevent 23.9.2.dev0 documentation 백엔드 개발자들이 알아야할 동시성 번외편— Python의 Concurrency | by Choi Geonu | Medium links coroutine 스레드 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python heapq</title>
      <link>https://chankoo.github.io/posts/python-heapq/</link>
      <pubDate>Fri, 18 Nov 2022 15:42:48 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/python-heapq/</guid>
      <description>
        
          
            content heap을 이용하는 q의 구현을 제공하는 모듈
heap = [] heapq.heappush(heap, item) heapq.heappop(heap) heappush 와 heappop 을 통해 힙 큐를 구현할 수 있다.
주의할 것은
heap 은 heap 자료구조가 아님. 선형 자료구조(ex. 리스트) 를 받아 힙의 구현을 도와주는 모듈임 최소 힙을 구현함 0을 제외한 인덱스로 읽지 말자 - heap[0] 을 제외한 값은 정렬된 형태가 아님 refs heapq — 힙 큐 알고리즘 — Python 3.12.0 문서 파이썬의 heapq 모듈로 힙 자료구조 사용하기 | Engineering Blog by Dale Seo links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Event Loop</title>
      <link>https://chankoo.github.io/posts/event-loop/</link>
      <pubDate>Tue, 25 Oct 2022 23:23:22 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/event-loop/</guid>
      <description>
        
          
            content 싱글 스레드에서 요청을 비동기로 처리하기 위해 사용하는 루프.
(gevent에서) I/O 요청시 커널에 요청을 주고 커널로 부터 응답 받은 이벤트를 처리하기 위해 돌고있는 루프 유저 영역 요청 -&amp;gt; 이벤트 루프 -&amp;gt; 이벤트 루프 응답 -&amp;gt; 대기하며 진행 커널 영역 블락 -&amp;gt; 이벤트 발생 -&amp;gt; 이벤트 루프에 노티 -&amp;gt; 대기 중인 것을 실현 (javascript에서) 콜백 큐에서 콜백 함수를 꺼내 콜 스택에 넣어 주는 루프 refs DEVIEW 2014 [JS] 도대체 이벤트 루프가 뭔가요?
          
          
        
      </description>
    </item>
    
    <item>
      <title>해시 충돌</title>
      <link>https://chankoo.github.io/posts/%ED%95%B4%EC%8B%9C-%EC%B6%A9%EB%8F%8C/</link>
      <pubDate>Sun, 16 Oct 2022 22:04:24 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%95%B4%EC%8B%9C-%EC%B6%A9%EB%8F%8C/</guid>
      <description>
        
          
            content (해시) 충돌은 1) 서로 다른 값이 동일한 해시를 뱉거나(해시 충돌) 2) 서로 다른 해시가 동일한 인덱스를 뱉는 경우를 말한다.
해시 자료구조를 구성할때 모든 key가 충돌한다면, 탐색에 O(n)이 걸린다.
모든 데이터가 하나의 인덱스에 저장(Separate Chaning)되거나 다른 인덱스에 순차적으로 저장(Open Addressing)될 것이기 때문이다. 저장할 값의 배열이 크지 않다면, Open Addressing 이 캐시 효율적이다. 연속된 공간에 저장한 데이터는 함께 캐싱될 것이고(cache line), spatial locality 에 따라 hit ratio가 높을 것이기 때문이다. 파이썬이 오픈 어드레싱 방식을 쓴다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>생성자</title>
      <link>https://chankoo.github.io/posts/%EC%83%9D%EC%84%B1%EC%9E%90/</link>
      <pubDate>Wed, 12 Oct 2022 11:19:58 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%83%9D%EC%84%B1%EC%9E%90/</guid>
      <description>
        
          
            content 객체를 초기화하고, 멤버 변수를 할당하여 객체를 (개념적으로)생성하는 서브루틴.
python의 예를 들면, python 객체는 new 를 통해 메모리에 할당되며, init 을 통해 멤버 변수를 정의한다. (개념적인) 객체의 생성이 init 을 통해 이루어졌으므로, init 이 python의 생성자라 할 수 있다.
refs Constructor (object-oriented programming) - Wikipedia Object lifetime - Wikipedia Python: __init__() is not the only constructor - DEV Community links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Generator</title>
      <link>https://chankoo.github.io/posts/generator/</link>
      <pubDate>Wed, 12 Oct 2022 00:08:35 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/generator/</guid>
      <description>
        
          
            content 제너레이터는 제어 흐름을 양보할 수 있는 Iterator이다. 루프를 순회하는 도중 의도적으로 순회를 멈추고, 자신을 호출한 루틴으로 제어 흐름을 양보할 수 있다. 때문에 semicoroutine 이라고도 불리는데, (제어 흐름을 넘겨줄 routine을 지정할 수 있는) coroutine 의 특수한 형태이기 때문이다.
이러한 제너레이터의 동작은 1) 메모리 효율 2) 동시성 의 관점에서 살펴볼만하다. 루프 내 요소의 평가가 필요할때 메모리에 요소를 올리는 lazy evaluation 이고, 원하는 시점에 제어흐름을 넘겨가며 동시성 프로그래밍을 가능케하는 pseudo thread 이기 때문이다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Iterator</title>
      <link>https://chankoo.github.io/posts/iterator/</link>
      <pubDate>Tue, 11 Oct 2022 23:36:52 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/iterator/</guid>
      <description>
        
          
            content 특정 집합 객체 요소에 순차적으로 접근 가능하도록 구현해놓은 객체. Iterator 패턴을 따라서 내부를 노출하지 않고 집합 객체의 구현에 종속되지 않아야한다.
Iterator 를 제공하는 객체는 Iterator Protocol 을 따랐다고 표현하는데, 이는 언어마다 상이하다. 에를 들어 javascript 에선 Iteration Protocol 하위에 Iteration Protocol 과 Iterator Protocol이 존재한다.
구현은 프로그래밍 언어마다 다양할 수 있다. 보통 Iterable 객체와 묶여서 구현한다. python과 java 모두 Iterable 객체로 부터 Iterator를 얻으며(iter, iterator()), 다음 요소를 가져오는 메소드를 제공한다(next, next()).
          
          
        
      </description>
    </item>
    
    <item>
      <title>ASGI</title>
      <link>https://chankoo.github.io/posts/asgi/</link>
      <pubDate>Tue, 11 Oct 2022 21:00:21 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asgi/</guid>
      <description>
        
          
            content Asynchronous Server Gateway Interface. 파이썬 웹 애플리케이션과 웹 서버의 공통 인터페이스를 기술한 프로토콜.
WSGI 처럼, 프로토콜 서버 내 앱들에게 표준화된 요청/응답을 주고받는 방식이나, ASGI는 비동기 방식으로 이벤트를 주고 받는 구조적인 차이가 있다.
refs ASGI (Asynchronous Server Gateway Interface) Specification — ASGI 3.0 documentation &amp;ldquo;파이썬 웹 개발의 미래&amp;rdquo; ASGI의 개념과 활용 방법 - ITWorld Korea links WSGI 
          
          
        
      </description>
    </item>
    
    <item>
      <title>WSGI</title>
      <link>https://chankoo.github.io/posts/wsgi/</link>
      <pubDate>Tue, 11 Oct 2022 21:00:21 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/wsgi/</guid>
      <description>
        
          
            content WSGI(Web Server Gateway Interface) 는 파이썬 웹앱과 웹서버 간 통신 인터페이스 명세이다.
refs links ASGI gunicorn 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Bytecode</title>
      <link>https://chankoo.github.io/posts/bytecode/</link>
      <pubDate>Sun, 09 Oct 2022 22:50:37 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/bytecode/</guid>
      <description>
        
          
            content 가상 컴퓨터의 실행 프로그램을 위한 이진 표현법. 하드웨어가 아니라 소프트웨어에서 해석되기에 기계어보다 더 추상적이다.
refs 바이트코드 - 위키백과, 우리 모두의 백과사전 links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>dis</title>
      <link>https://chankoo.github.io/posts/dis/</link>
      <pubDate>Sun, 09 Oct 2022 22:02:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dis/</guid>
      <description>
        
          
            content 파이썬 바이트코드 역 어셈블러. CPython의 바이트 코드를 역 어셈블하여 바이트 코드 레벨의 분석을 돕는 모듈이다.
ex)
def hi(x): x += 1 print(x) return x 위 정의에 따르면, 추상화한 바이트코드를 바이트코드로 바꾸는 것도 어셈블이라 볼 수 있다.
refs dis &amp;mdash; 파이썬 바이트 코드 역 어셈블러 — 파이썬 설명서 주석판 links Bytecode Assembler 
          
          
        
      </description>
    </item>
    
    <item>
      <title>gunicorn</title>
      <link>https://chankoo.github.io/posts/gunicorn/</link>
      <pubDate>Sun, 09 Oct 2022 12:34:05 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gunicorn/</guid>
      <description>
        
          
            content UNIX 용 WSGI 서버이다.
파이썬 어플리케이션을 서빙하는 worker 를 fork하는데, worker 타입은 다음과 같다.
sync 병렬로 동작하는 N개 프로세스를 fork한다. I/O로 인한 블로킹이 적을 경우 적합 gthread N개 스레드를 fork한다. 멀티스레딩을 지원하는 앱일 경우 적합 gevent gevent로 구현한 N개 웹서버를 실행한다. I/O 바운드인 보통의 서비스에 적합 refs Gunicorn vs Python GIL. What is the Python GIL, how it works… | by Luis Sena | Medium links WSGI 7가지 동시성 모델 gevent 
          
          
        
      </description>
    </item>
    
    <item>
      <title>numpy array</title>
      <link>https://chankoo.github.io/posts/numpy-array/</link>
      <pubDate>Mon, 03 Oct 2022 16:17:54 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/numpy-array/</guid>
      <description>
        
          
            content 파이썬의 list 보다 np array가
더 빠르다 element로 PyObject 대신 value를 들고 있어 직접 접근할 수 있다. 메모리 효율이 좋다. element의 크기가 작다 PyObject - 4 for type pointer, 4 for reference count, 4 for value &amp;ndash; and the memory allocators rounds up to 16 value - single-precision numbers takes 4 bytes each, double-precision ones, 8 bytes 동적배열 아니어서 크기가 고정이며 정적할당하여 element 타입이 고정이다 refs links PyObject Dynamic Array 
          
          
        
      </description>
    </item>
    
    <item>
      <title>why numpy array</title>
      <link>https://chankoo.github.io/posts/why-numpy-array/</link>
      <pubDate>Mon, 03 Oct 2022 16:17:54 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/why-numpy-array/</guid>
      <description>
        
          
            content 파이썬의 list 보다 np array가
더 빠르다 element로 PyObject 대신 value를 들고 있어 직접 접근할 수 있다. 메모리 효율이 좋다. element의 크기가 작다 PyObject - 4 for type pointer, 4 for reference count, 4 for value &amp;ndash; and the memory allocators rounds up to 16 value - single-precision numbers takes 4 bytes each, double-precision ones, 8 bytes 동적배열 아니어서 크기가 고정이며 정적할당하여 element 타입이 고정이다 refs links PyObject Dynamic Array 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Python-GC</title>
      <link>https://chankoo.github.io/posts/python-gc/</link>
      <pubDate>Mon, 03 Oct 2022 16:08:52 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/python-gc/</guid>
      <description>
        
          
            content 파이썬(CPython)에서는 아래 두가지 객체에 대해 가비지 컬렉션을 실행한다.
PyObject의 ref count가 0
순환 참조가 발생했고 그 외의 참조는 없음
예제 l = [] l.append(l) del l refs Python GC가 작동하는 원리 links 가비지 컬렉션 PyObject 
          
          
        
      </description>
    </item>
    
    <item>
      <title>GIL</title>
      <link>https://chankoo.github.io/posts/gil/</link>
      <pubDate>Mon, 03 Oct 2022 15:57:13 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gil/</guid>
      <description>
        
          
            content 파이썬 객체의 레퍼런스 카운팅이 정상적으로 동작하도록, 인터프리터의 동작을 전역적으로 통제하는 락. 여러 스레드가 한 객체의 레퍼런스 카운트를 조작하는 동시성 을 제어하기위해, GIL 을 가진 스레드만 자원을 통제할 수 있다.
더 구체적으로 말하면, 멀티 스레딩 환경에서 각 스레드는 레퍼런스 카운팅을 위해 PyObject 의 ob_refcnt를 조작하는데, 이는 race condition이다. race condition 해결을 위해 일반적인 mutex 를 사용하자니 각 객체 마다 락이 필요하고, deadlock 의 리스크도 존재한다. 그래서 파이썬(CPython)은 GIL을 통해 인터프리터 자체를 잠가버렸다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>PyObject</title>
      <link>https://chankoo.github.io/posts/pyobject/</link>
      <pubDate>Mon, 03 Oct 2022 15:37:15 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/pyobject/</guid>
      <description>
        
          
            content 일반적인 CPython 구현체를 가정했을때, 파이썬의 메모리 관리 알고리즘은 C로 쓰여졌고, 이해를 위해서는 CPython 의 내부 구현을 알아야한다.
모든 파이썬 객체는 PyObject라는 c struct 를 확장하여 가지고 있다.
ob_type 은 해당 객체의 타입 오브젝트(PyTypeObject)를 가리키는 포인터이다. PyTypeObject 역시 c struct 이며 특정 타입(int, dict 등)에 대한 메타 데이터를 가진다. ob_refcnt 는 객체를 참조하는 레퍼런스의 수를 저장한다. refs Memory Management in Python – Real Python links CPython 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Cython</title>
      <link>https://chankoo.github.io/posts/cython/</link>
      <pubDate>Mon, 03 Oct 2022 13:54:50 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cython/</guid>
      <description>
        
          
            content Cython: C-Extension for Python C로 파이썬의 확장 모듈을 구현하기 위해 설계한 컴파일 언어. C와 파이썬의 superset이며 표준 C/C++ 컴파일러를 이용한다. 이러한 특성은 파이썬 언어의 높은 생산성을 활용하면서 실행 속도의 향상을 가져온다.
refs 사이썬 - 위키백과, 우리 모두의 백과사전 links CPython 컴파일러 
          
          
        
      </description>
    </item>
    
    <item>
      <title>CPython</title>
      <link>https://chankoo.github.io/posts/cpython/</link>
      <pubDate>Mon, 03 Oct 2022 13:40:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cpython/</guid>
      <description>
        
          
            content C로 구현한 파이썬 인터프리터 시스템. 파이썬 언어로 쓰인 스크립트를 바이트코드(.pyc, pycache)로 컴파일한 후, 인터프리터로 실행한다.
refs CPython 파헤치기: 따라 하면서 이해하는 파이썬 내부의 동작 원리 – 도서출판 인사이트 links 인터프리터 Bytecode 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Dynamic Array</title>
      <link>https://chankoo.github.io/posts/dynamic-array/</link>
      <pubDate>Mon, 03 Oct 2022 00:11:36 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dynamic-array/</guid>
      <description>
        
          
            content python 의 list 는 dynamic array이다. 런타임에 element를 추가할때, 리스트에 할당된 메모리 공간이 모자라면 리스트 크기를 늘린다. 그런데 dynamic array도 엄연한 array 이기에 &amp;rsquo;element 가 연속된 메모리 공간을 점유한다&amp;rsquo;는 제약을 따라야한다. 그래서 python(cpython)은 요소가 추가되어 리스트 크기가 변해야할 때, 전체 list를 복사하여 더 큰(2의 거듭제곱) 공간에 통째로 재할당 한다.
이는 시간 복잡도 계산에 영향을 준다. list 에 요소를 더하는 append 나 insert 연산의 시간 복잡도를 계산할 때 메모리 재할당 시간까지 고려해야 한다는 의미다.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
