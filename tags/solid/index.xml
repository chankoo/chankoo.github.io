<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOLID on </title>
    <link>https://chankoo.github.io/tags/solid/</link>
    <description>Recent content in SOLID on </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Sun, 30 Oct 2022 19:08:11 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/solid/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ISP</title>
      <link>https://chankoo.github.io/posts/isp/</link>
      <pubDate>Sun, 30 Oct 2022 19:08:11 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/isp/</guid>
      <description>
        
          
            content 인터페이스 분리 원칙; Interface Separation Principle 인터페이스를 분리하여, 요소가 사용하는 인터페이스에만 의존하도록 설계해야한다.
refs 클린 아키텍처 links SOLID 
          
          
        
      </description>
    </item>
    
    <item>
      <title>LSP</title>
      <link>https://chankoo.github.io/posts/lsp/</link>
      <pubDate>Sun, 30 Oct 2022 17:51:17 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/lsp/</guid>
      <description>
        
          
            content 리스코프 치환 원칙; Liskov Subsitution Principle 상위 타입 객체는 하위 타입 객체로 별도 조작 없이 치환 가능해야한다.
객체 지향 언어는 다형성을 제공하기에, LSP를 지킨 설계를 활용하기 유리하다. 사용할 하위 타입을 런타임에 선택하여 상위 타입을 대체하기 용이하다.
LSP를 위반하면 OCP를 위반하는 것이다. 하위 타입을 추가(확장)하여 상위 타입을 바로 대체할 수 없기 때문이다. LSP를 위반한다면 보통 해당 객체를 사용하는 클라이언트 코드를 수정해야한다. 그리고 이 수정은 끔찍한 형태로 의존을 낳는다. 흔히 드는 예시가 직사각형을 상속한 정사각형 인데, 정사각형은 반드시 너비와 높이가 일치해야하므로 직사각형 객체를 대체할 수 없다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>OCP</title>
      <link>https://chankoo.github.io/posts/ocp/</link>
      <pubDate>Fri, 28 Oct 2022 00:36:16 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/ocp/</guid>
      <description>
        
          
            content 개방-폐쇄 원칙; Open Close Principle 소프트웨어 요소는 확장에는 open, 수정에는 close여야 한다. 수정 보다 비용이 적은 확장으로 소프트웨어를 수정해야한다.
OCP를 지키기 위해서는 의존 관계를 잘 설계해야한다. 의존 관계가 확장 가능한 요소와 수정해야하는 요소를 결정짓기 때문인데, A -&amp;gt; B (A가 B에 의존)이라면 A는 확장 가능한 요소이고 B는 수정해야하는 요소가 되는 것이다.
이를 위해 DIP를 지켜야한다. 추상 보다 구현의 변화가 많은데, 구현이 추상에 의존해야 구현을 확장할 수 있기 때문이다.
모듈 레벨(OOP 클래스)에만 적용되는 원칙이 아니다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>SOLID</title>
      <link>https://chankoo.github.io/posts/solid/</link>
      <pubDate>Thu, 27 Oct 2022 22:13:29 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/solid/</guid>
      <description>
        
          
            content 모듈 수준의 소프트웨어 설계 원칙.
SRP OCP LSP ISP DIP
refs 클린 아키텍처 links 모듈 
          
          
        
      </description>
    </item>
    
    <item>
      <title>SRP</title>
      <link>https://chankoo.github.io/posts/srp/</link>
      <pubDate>Thu, 27 Oct 2022 22:10:27 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/srp/</guid>
      <description>
        
          
            content 단일 책임 원칙 - Single Responsibility Principle 모듈은 한 액터(사용자, 이해관계자)만 책임진다. 모듈을 변경한다면 그 이유는 반드시 한 액터 때문이어야 한다.
SRP를 따르면, 여러 액터의 요구를 책임지는 모듈은 책임을 찢어야 한다.
예를 들어 클래스 Employee가 재무팀을 위한 급여 계산 / 인사팀을 위한 업무 시간 계산을 책임지고 있다면, 이는 SRP를 위반한다. 그래서 -&amp;gt; 급여 계산을 위한 클래스와 업무 시간 계산을 위한 클래스로 책임을 분리하고, EmployeeFacade 클래스를 두어 인터페이스를 정리할 수 있다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>DIP</title>
      <link>https://chankoo.github.io/posts/dip/</link>
      <pubDate>Thu, 06 Oct 2022 23:42:10 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/dip/</guid>
      <description>
        
          
            content Dependency Inversion Principle(의존성 역전 원칙) 더 구체적인(하위 계층) 모듈에 의존하는 일반적(절차적)인 의존성의 흐름을 역전 시켜 더 추상적인(상위 계층) 모듈에 의존하도록해야한다.
추상 팩토리 패턴이 대표적이다. 객체 생성을 위해 구체 팩토리에 의존(요소 -&amp;gt; 팩토리)하는 것이 아니라, 추상 팩토리에 의존(요소 -&amp;gt; 추상 팩토리 $\Leftarrow$ 구체 팩토리)하는 것이다.
refs 클린 아키텍처 links SOLID 추상 팩토리 패턴 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
