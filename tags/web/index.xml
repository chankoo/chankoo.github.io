<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on chankoo</title>
    <link>https://chankoo.github.io/tags/web/</link>
    <description>Recent content in web on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 06 Jan 2024 16:19:35 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>웹소켓 확장성</title>
      <link>https://chankoo.github.io/posts/%EC%9B%B9%EC%86%8C%EC%BC%93-%ED%99%95%EC%9E%A5%EC%84%B1/</link>
      <pubDate>Sat, 06 Jan 2024 16:19:35 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%9B%B9%EC%86%8C%EC%BC%93-%ED%99%95%EC%9E%A5%EC%84%B1/</guid>
      <description>
        
          
            웹소켓은 stateful 하기에 웹소켓 서버의 확장을 구현하기 까다롭다.
(다른 경우와 마찬가지로)수직보다는 수평 확장이 대개 낫다. 수직 확장은 1) 비용이 많이 들고(자원 확장의 비선형성, 때에 따라 자원 조절 불가) 2) 단일실패점이 될 위험이 있다. 메시지 공유를 위한 서버 간 채널이 필요하다. 보통 pub/sub 을 통해 각각 다른 서버에 연결된 클라이언트를 동기화한다. 로드 밸런싱 알고리즘에 대한 고려가 필요하다. 웹소켓 부하 분산은 (요청 단위 아니라) 지속적인 커넥션 단위로 동작해야한다. 그렇기에 일반적으로 많이 쓰는 라운드 로빈을 사용하면, 실제 요청량에 따라 부하 분산에 실패할 수 있다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>CORS</title>
      <link>https://chankoo.github.io/posts/cors/</link>
      <pubDate>Wed, 29 Nov 2023 21:32:15 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cors/</guid>
      <description>
        
          
            Cross-Origin Resource Sharing. 출처가 다른(Cross-Origin) 요청에 대해 리소스를 내려 줄 것인지 판단하는 정책이다.
요청 헤더 Origin에 출처가 담긴다. 스킴, 도메인, 포트 중 하나라도 다르면 Cross-Origin으로 본다. 응답 헤더 Access-Control-Allow-Origin에 허용된 출처가 담긴다. 브라우저가 Origin, Access-Control-Allow-Origin 그리고 요청 시나리오를 고려하여 CORS 위반 여부를 판단한다. refs CORS는 왜 이렇게 우리를 힘들게 하는걸까? | Evans Library links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>webhook</title>
      <link>https://chankoo.github.io/posts/webhook/</link>
      <pubDate>Mon, 27 Nov 2023 20:53:18 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/webhook/</guid>
      <description>
        
          
            특정 이벤트가 발생했을때 타겟 서비스 엔드포인트로 데이터를 전달하는 http 기반의 콜백
refs 웹훅(Webhook) | 토스페이먼츠 개발자센터 links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Client-side Navigation</title>
      <link>https://chankoo.github.io/posts/client-side-navigation/</link>
      <pubDate>Wed, 08 Nov 2023 10:00:42 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/client-side-navigation/</guid>
      <description>
        
          
            Next.js 의 페이지 간 이동을 client-side에서 처리하는 것을 의미한다
a 태그를 사용한 전통적인 라우팅과 달리, full page reload 를 (당연히) 하지 않고, 링크가 있으면 prefetching 하여 필요한 데이터(js 파일)를 미리 받아오며, 자체적으로 code splitting과 cache, partial-rendering 을 통해 사용성을 높이는 이점이 있다.
refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>WebSocket</title>
      <link>https://chankoo.github.io/posts/websocket/</link>
      <pubDate>Thu, 30 Mar 2023 15:23:12 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/websocket/</guid>
      <description>
        
          
            서버-클라이언트 양방향 일대일 통신을 제공하는 프로토콜
http는 아니지만 http 업그레이드 헤더를 사용하도록 호환된다 통신 상대가 정해져있어 데이터를 절약한다. stateful 하기에 채널을 온메모리로 관리해야한다. refs 리얼월드 HTTP links 소켓 
          
          
        
      </description>
    </item>
    
    <item>
      <title>SSE</title>
      <link>https://chankoo.github.io/posts/sse/</link>
      <pubDate>Thu, 30 Mar 2023 15:17:58 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/sse/</guid>
      <description>
        
          
            Server-Sent Events. HTML5 의 기능으로, 한번의 요청에 서버가 여러 이벤트(청크) 전송을 제공하는 프로토콜. http 위에서 동작하는 별도 텍스트 프로토콜이다(text/event-stream).
refs 리얼월드 HTTP Server-sent events - Web APIs | MDN links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>JWT</title>
      <link>https://chankoo.github.io/posts/jwt/</link>
      <pubDate>Sat, 19 Nov 2022 21:38:05 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/jwt/</guid>
      <description>
        
          
            JSON Web Token. 사용자의 정보를 Json에 담아 보내는 형식의 웹 토큰이다.
핵심 Header / Payload / Signature 로 나뉘며, base64 인코딩을 통해 url-safe한 xxx.yyy.zzz 형태로 표현한다. Header에는 Signature 에 서명한 알고리즘 정보를 담는다. Payload에는 실제 사용자 정보를 Json 형태로 담으며 추가에 열려있다. Signature는 header와 payload가 변경 안되었음을 보증한다.
주로 인증을 위해 사용하는데, JWT의 유효성(위조 여부)만 확인하면 인증은 완료된다. 이미 JWT 발급 시점에 (id, pwd로) 사용자를 인증했고 그 결과로 JWT를 생성했기에, (Signature를 이용하여) JWT 가 위조되지 않았다는 것만 확인하면 JWT 발급 시점과 같은 사용자라는 것을 알게되는 원리이다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>ASGI</title>
      <link>https://chankoo.github.io/posts/asgi/</link>
      <pubDate>Tue, 11 Oct 2022 21:00:21 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asgi/</guid>
      <description>
        
          
            Asynchronous Server Gateway Interface. 파이썬 웹 애플리케이션과 웹 서버의 공통 인터페이스를 기술한 프로토콜.
WSGI 처럼, 프로토콜 서버 내 앱들에게 표준화된 요청/응답을 주고받는 방식이나, ASGI는 비동기 방식으로 이벤트를 주고 받는 구조적인 차이가 있다.
refs ASGI (Asynchronous Server Gateway Interface) Specification — ASGI 3.0 documentation &amp;ldquo;파이썬 웹 개발의 미래&amp;rdquo; ASGI의 개념과 활용 방법 - ITWorld Korea links WSGI 
          
          
        
      </description>
    </item>
    
    <item>
      <title>WSGI</title>
      <link>https://chankoo.github.io/posts/wsgi/</link>
      <pubDate>Tue, 11 Oct 2022 21:00:21 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/wsgi/</guid>
      <description>
        
          
            WSGI(Web Server Gateway Interface) 는 파이썬 웹앱과 웹서버 간 통신 인터페이스 명세이다.
refs links ASGI gunicorn 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
