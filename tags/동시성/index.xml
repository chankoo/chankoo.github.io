<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>동시성 on </title>
    <link>https://chankoo.github.io/tags/%EB%8F%99%EC%8B%9C%EC%84%B1/</link>
    <description>Recent content in 동시성 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Wed, 22 Nov 2023 17:46:10 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/%EB%8F%99%EC%8B%9C%EC%84%B1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>비동기</title>
      <link>https://chankoo.github.io/posts/%EB%B9%84%EB%8F%99%EA%B8%B0/</link>
      <pubDate>Wed, 22 Nov 2023 17:46:10 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%B9%84%EB%8F%99%EA%B8%B0/</guid>
      <description>
        
          
            content 동기적이지 않은 것(asynchronous)을 의미한다.
동기적이라는 건 작업들을 순차적으로 진행함을 의미하는데, 한 작업이 끝나기를 기다려야하는 속성이 있다. 반면에 비동기는 한 작업이 끝나기를 기다리지 않고 다른 작업을 진행하는 것을 말하며, 동기적이지 않은 모든 방식을 의미한다.
비동기의 예시 non-block I/O - 요청을 block하는 작업이 아니기에 I/O를 기다리는 동안 다른 작업을 처리할 수 있다. 멀티 스레딩 - 여러 작업을 각 스레드가 나누어 진행하기에 동기적이지 않다. block I/O 작업이라도 비동기로 진행할 수 있다 refs 비동기 프로그래밍, 비동기 I/O, 비동기 커뮤니케이션.
          
          
        
      </description>
    </item>
    
    <item>
      <title>스레드</title>
      <link>https://chankoo.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C/</link>
      <pubDate>Wed, 22 Nov 2023 16:24:20 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C/</guid>
      <description>
        
          
            content 컴퓨터 과학에서 어떠한 작업을 처리하는 흐름의 단위를 말한다.
종류 하드웨어 스레드 - 하드웨어 레벨에서 CPU 코어의 작업을 나눠 놓은 단위이다. 코어의 한 하드웨어 스레드가 메모리에 접근하는 시간에 다른 스레드가 CPU 연산을 이용하는 병행처리를 가능케 한다. OS 스레드 - 일반적인 의미의 스레드로, CPU에서 실제로 실행(CPU 스케줄링)되는 단위이다. OS 커널이 시스템콜을 통해 스레드를 생성하고, 컨텍스트 스위칭을 한다. 네이티브 스레드, 커널 스레드라 불리기도 한다. 유저 스레드 - 유저가 관리하는 단위의 스레드로 프로그래밍 레벨에서 추상화한 OS 스레드를 의미한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>coroutine</title>
      <link>https://chankoo.github.io/posts/coroutine/</link>
      <pubDate>Tue, 11 Oct 2022 20:39:15 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/coroutine/</guid>
      <description>
        
          
            content Co-Routine. 다른 루틴과 동등한 레벨에서 상호 협력하는 루틴. routine - subroutine 으로 종속되는 개념과 대비된다.
프로그래머는 코루틴 간 제어 흐름을 의도에 따라 통제하는데, 실행 중인 코루틴이 자신의 흐름을 멈추고 다른 코루틴에 양보(yield) 하도록 하는 방식이다.
코루틴 간의 스위칭을 통해 (스레드 스위칭과 유사하게) 동시성 프로그래밍할 수 있다. 코루틴이 &amp;ldquo;lightweight&amp;rdquo; 스레드라고도 불리는 이유이다. 스레드와의 주된 차이는, 별도의 스택 메모리를 갖지 않는다(stackless coroutine)는 점, 병렬 실행이 불가하다는 점 등이 있다.
refs 파이썬과 동시성 프로그래밍 - Sungho&amp;rsquo;s Blog Coroutine, Thread 와의 차이와 그 특징 - Crucian Carp links 동시성 스레드 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Isolation Levels</title>
      <link>https://chankoo.github.io/posts/isolation-levels/</link>
      <pubDate>Sun, 09 Oct 2022 12:37:01 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/isolation-levels/</guid>
      <description>
        
          
            content Transaction 간 격리 수준. DBMS는 다양한 수준의 Isolation Level을 제공하여 ACID의 Isolation 관점에서 엄격히 제한된 Transaction의 병행성 제약을 완화한다. 이상적으로 Transaction은 엄격히 격리해야 하지만, 실무적으로 걸림돌이 되기에, 격리 수준을 단계적으로 완화하는 Isolation Levels 를 정의하여 상황에 맞게 제공한다.
Serializable - Isolation 제약을 지키는 수준으로 트랜잭션을 serial schedule 로 수행하여 다른 트랜잭션의 수행과 겹치는 시간이 없다. Repetable Reads - 반복해서 읽어도 같은 결과를 보여주는 수준으로, 반복 read 도중 커밋이 발생하여 값이 변해도 커밋 전 값을 읽어간다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Starvation</title>
      <link>https://chankoo.github.io/posts/starvation/</link>
      <pubDate>Sun, 09 Oct 2022 00:15:32 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/starvation/</guid>
      <description>
        
          
            content 기아 상태 여러 스레드나 프로세스가 자원을 점유하는 상황에서, 특정 스레드나 프로세스가 자원을 할당 받지 못하여 진행할 수 없는 상태
refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Race Condition</title>
      <link>https://chankoo.github.io/posts/race-condition/</link>
      <pubDate>Sat, 08 Oct 2022 21:56:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/race-condition/</guid>
      <description>
        
          
            content 경쟁 상태 여러 스레드나 프로세스가 한 자원에 동시에 접근하고 조작하여 예상치 못한 결과(non deterministic)을 도출할 수 있는 상태. 즉, 스레드가 자원에 접근하는 타이밍에 결과가 영향 받는 상태를 의미한다
refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Thread Safe</title>
      <link>https://chankoo.github.io/posts/thread-safe/</link>
      <pubDate>Sat, 08 Oct 2022 21:07:04 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/thread-safe/</guid>
      <description>
        
          
            content 일반적으로, 여러 스레드가 실행해도 정상적으로 동작(매번 같은 결과를 리턴)하는 코드(변수, 함수 등)를 스레드 안전 하다고 말한다.
동시성을 다룰 땐 &amp;lsquo;스레드 안전&amp;rsquo; 해야하는데, 이를 구현하는 모델로 잠금장치, 함수형 프로그래밍, 클로저 등을 쓸 수 있겠다.
refs 7가지 동시성 모델 links 동시성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>병렬성</title>
      <link>https://chankoo.github.io/posts/%EB%B3%91%EB%A0%AC%EC%84%B1/</link>
      <pubDate>Sat, 08 Oct 2022 21:01:11 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%B3%91%EB%A0%AC%EC%84%B1/</guid>
      <description>
        
          
            content 여러 일을 한꺼번에 실행하는 것. Parallelism. CPU의 영역에서 명세하자면, 여러 CPU가 스레드 하나씩을 동시에 실행하는 것이다.
여러가지 일을 동시에 다루는 요구사항(동시성)을 해결하는 방법이기에 해법의 속성을 내포한다. 실제로 순차적 프로그래밍의 한계를 넘어서는 기술이다.
refs 7가지 동시성 모델 links 동시성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>동시성</title>
      <link>https://chankoo.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1/</link>
      <pubDate>Tue, 04 Oct 2022 22:32:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1/</guid>
      <description>
        
          
            content 여러 일을 한꺼번에 다루는 것. Concurrency. CPU의 영역에서 명세하자면, CPU는 하나인데 여러 스레드에서 각각의 제어흐름을 다루고 있는 상황이다.
순차적 프로그래밍의 한계를 넘어서려는 시도이나, 여러가지 일을 동시에 다루는 척(병렬 착각, 병행성)하는 것이기에 그자체로 문제의 속성을 내포한다.
refs 7가지 동시성 모델 links 병렬성 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
