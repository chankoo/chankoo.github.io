<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>동시성 on chankoo</title>
    <link>https://chankoo.github.io/tags/%EB%8F%99%EC%8B%9C%EC%84%B1/</link>
    <description>Recent content in 동시성 on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 25 Jan 2024 15:44:56 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/%EB%8F%99%EC%8B%9C%EC%84%B1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Asyncio Cancellation</title>
      <link>https://chankoo.github.io/posts/asyncio-cancellation/</link>
      <pubDate>Thu, 25 Jan 2024 15:44:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asyncio-cancellation/</guid>
      <description>
        
          
            코루틴이 외부 요인에 의해 중단되었음을 의미
모든 await 구문에서 아무때나 발생 가능하다. CancelledError 예외가 발생하게되며, 예외 처리를 통해 clean-up 해야한다. clean-up 작업이 까다로운데, 제대로 처리하지 못하면 예기치 못한 문제(취소된 작업이 db 커넥션을 물고 있다거나)를 야기한다.
명시적으로 Cancellation을 발생시키려면,
코루틴에 asyncio.CancelledError 를 throw 하거나(실제 코드에선 잘 안쓰임) 퓨처 또는 태스크 객체의 .cancel() 을 호출하거나 raise asyncio.CancelledError 를 통해 스스로 작업을 취소 import asyncio async def f(): try: while True: await asyncio.sleep(0) # cancellable 하게 만드는 asyncio.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Using Asyncio in Python</title>
      <link>https://chankoo.github.io/posts/using-asyncio-in-python/</link>
      <pubDate>Sat, 20 Jan 2024 18:37:07 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/using-asyncio-in-python/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Asyncio</title>
      <link>https://chankoo.github.io/posts/asyncio/</link>
      <pubDate>Sat, 20 Jan 2024 13:30:38 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asyncio/</guid>
      <description>
        
          
            async / await 문을 이용해 비동기 프로그래밍을 구현하는 파이썬 라이브러리이다.
IO 작업에 async 기반 동시성은
스레드 기반 동시성 보다 안전한 선점 스케줄링을 구현하면서 가볍다. 많은 자원이 아니라 단순히 시간이 필요한 IO 작업에 적합하다. 멀티 스레딩 코드보다 제어권 변동을 명시적으로 표현(await)하여 코드 레벨에서 관측 가능하다. 사용자 관점에서 주요한 요소들을 알아보자.
asyncio.run() 코루틴 체인의 최상위 진입점으로, 코루틴 내 코루틴들을 모두 실행한다. 이벤트 루프 생성, 태스크 실행, 보류 태스크 취소, 이벤트 루프 소멸까지 한번에 작업한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Asyncio Lock</title>
      <link>https://chankoo.github.io/posts/asyncio-lock/</link>
      <pubDate>Tue, 09 Jan 2024 16:20:24 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/asyncio-lock/</guid>
      <description>
        
          
            asyncio 라이브러리가 제공하는 잠금으로 코루틴 간 경합 상황을 해결하는 도구이다.
멀티 스레딩 환경에서는 적합하지 않은데, 스레드 레벨에서는 점유 배제를 보장할 수 없기 때문이다. 즉, 스레드 A의 코루틴이 잠금을 획득했더라도 스레드 B의 코루틴은 영향 받지 않는다.
refs asyncio의 동기화수단들 · Wireframe links Asyncio 
          
          
        
      </description>
    </item>
    
    <item>
      <title>2PL</title>
      <link>https://chankoo.github.io/posts/2pl/</link>
      <pubDate>Wed, 20 Dec 2023 21:29:31 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/2pl/</guid>
      <description>
        
          
            content Two Phase Locking. DB에서 직렬성을 구현하는데 널리 쓰이는 알고리즘.
잠금을 확장과 수축의 두단계로 나누어 모든 트랜잭션이 lock을 획득한 후 차례로 unlock 하기에 직렬성을 구현할 수 있다.
refs 데이터 중심 애플리케이션 설계 2 Phase Locking (2PL) : 네이버 블로그 links 직렬성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Awaitable 객체</title>
      <link>https://chankoo.github.io/posts/awaitable-%EA%B0%9D%EC%B2%B4/</link>
      <pubDate>Thu, 07 Dec 2023 14:11:07 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/awaitable-%EA%B0%9D%EC%B2%B4/</guid>
      <description>
        
          
            await 키워드로 실행하는 코루틴, 퓨처, 태스크를 의미한다.
awaitable 객체는 다음과 같이 정의한다.
코루틴 이거나 이터레이터를 반환하는 _await_() 메소드를 구현한 객체 퓨처는 이벤트 루프와 상호작용하는 객체로 작업 실행 상태와 결과를 저장한다.
상태는 1) PENDING, 2) CANCELLED, 3) FINISHED 의 세가지이며, CANCELLED 와 FINISHED는 완료 상태이다 결과 값을 저장(.set_result(value))하고 가져올(.result()) 수 있다. 실행 중 취소(.cancel()) 할 수 있다. .add_done_callback() 으로 완료 후 호출할 콜백을 등록할 수 있다. 태스크는 퓨처의 서브클래스로 퓨처 인터페이스에 더해 코루틴과 상호작용하는 역할을 한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>스케줄링</title>
      <link>https://chankoo.github.io/posts/%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/</link>
      <pubDate>Thu, 30 Nov 2023 15:46:27 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81/</guid>
      <description>
        
          
            OS가 CPU를 프로세스에게 할당하는 정책이다.
선점형 vs 비선점형(협력적) 자원을 점유하는 프로세스를 중지하고 강제로 자원을 가져가는 선점형 자원을 점유하는 프로세스가 종료되거나, I/O 발생하여 대기 할때까지 기다리는 비선점형 정적 vs 동적 프로세스에 부여된 우선순위가 고정 vs 유동 refs 스케줄링 (컴퓨팅) - 위키백과, 우리 모두의 백과사전 백엔드 개발자들이 알아야할 동시성 4 — 스케줄링. 지난 포스팅에선 많은 쓰레드와 잦은 컨텍스트 스위칭이 어떻게 웹서버의… | by Choi Geonu | Medium links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>CPS</title>
      <link>https://chankoo.github.io/posts/cps/</link>
      <pubDate>Thu, 30 Nov 2023 15:43:19 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/cps/</guid>
      <description>
        
          
            Continuation Passing Style. 말그대로 Continuation을 전달하는 방식으로 프로그래밍하는 것을 말한다.
이는 CPS 함수를 정의할 때 특정한 작업(ex. 콜백 함수) 을 명시적 인자로 받게되는데, CPS 함수는 해당 함수의 작업이 끝난 후 인자로 받은 작업을 수행하게 된다. Continuation이 CPS 함수에 있다가 인자로 받은 작업으로 넘어가는 것이다.
CPS가 아니라면 함수가 그냥(암묵적으로) 작업을 수행하며, Continuation은 해당 함수에 머무른다.
refs Continuation-passing style - Wikipedia 백엔드 개발자들이 알아야할 동시성 5 — Continuation Passing Style | by Choi Geonu | Medium Continuation-Passing Style.
          
          
        
      </description>
    </item>
    
    <item>
      <title>gevent</title>
      <link>https://chankoo.github.io/posts/gevent/</link>
      <pubDate>Tue, 28 Nov 2023 15:55:32 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gevent/</guid>
      <description>
        
          
            코루틴 기반의 파이썬 라이브러리로 고성능 I/O를 위한 동시성을 지원한다.
greenlet 이라는 경량 스레드(코루틴)와 event loop를 이용하여 넌블러킹 &amp;amp; 비동기 I/O를 지원한다. monkey patching을 이용해 표준 라이브러리의 구현을 gevent의 구현으로 바꿔치기하는 방식으로 동작한다.
파이썬이 표준으로 제공하는 구현이 아니고 어디까지나 monkey patching(흑마법) 이기에 한계가 분명하다. (대표적으로 mysqlclient는 gevent 와 호환되지 않는다)
refs What is gevent? - gevent 23.9.2.dev0 documentation 백엔드 개발자들이 알아야할 동시성 번외편— Python의 Concurrency | by Choi Geonu | Medium links coroutine 스레드 
          
          
        
      </description>
    </item>
    
    <item>
      <title>비동기</title>
      <link>https://chankoo.github.io/posts/%EB%B9%84%EB%8F%99%EA%B8%B0/</link>
      <pubDate>Wed, 22 Nov 2023 17:46:10 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%B9%84%EB%8F%99%EA%B8%B0/</guid>
      <description>
        
          
            동기적이지 않은 것(asynchronous)을 의미한다.
동기적이라는 건 작업들을 순차적으로 진행함을 의미하는데, 한 작업이 끝나기를 기다려야하는 속성이 있다. 반면에 비동기는 한 작업이 끝나기를 기다리지 않고 다른 작업을 진행하는 것을 말하며, 동기적이지 않은 모든 방식을 의미한다.
비동기 프로그래밍을 가능케하는 조건
non-block IO - 요청을 block하는 작업이 아니기에 I/O를 기다리는 동안 다른 작업을 처리(async, non-block)할 수 있다. 멀티 스레딩 - 여러 작업을 각 스레드가 나누어 진행하기에 동기적이지 않다. block IO 작업이라도 비동기로 진행할 수 있다 예외 async / blocking IO async로 동작하려하지만 제어권이 없기 때문에 메인 플로우를 진행시키지 못한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>스레드</title>
      <link>https://chankoo.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C/</link>
      <pubDate>Wed, 22 Nov 2023 16:24:20 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%8A%A4%EB%A0%88%EB%93%9C/</guid>
      <description>
        
          
            컴퓨터 과학에서 어떠한 작업을 처리하는 흐름의 단위를 말한다.
종류 하드웨어 스레드 - 하드웨어 레벨에서 CPU 코어의 작업을 나눠 놓은 단위이다. 코어의 한 하드웨어 스레드가 메모리에 접근하는 시간에 다른 스레드가 CPU 연산을 이용하는 병행처리를 가능케 한다. OS 스레드 - 일반적인 의미의 스레드로, CPU에서 실제로 실행(CPU 스케줄링)되는 단위이다. OS 커널이 시스템콜을 통해 스레드를 생성하고, 컨텍스트 스위칭을 한다. 네이티브 스레드, 커널 스레드라 불리기도 한다. 유저 스레드 - 유저가 관리하는 단위의 스레드로 프로그래밍 레벨에서 추상화한 OS 스레드를 의미한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Event Loop</title>
      <link>https://chankoo.github.io/posts/event-loop/</link>
      <pubDate>Tue, 25 Oct 2022 23:23:22 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/event-loop/</guid>
      <description>
        
          
            싱글 스레드에서 요청을 비동기로 처리하기 위해 사용하는 루프.
(python asyncio에서) Asyncio Event Loop (gevent에서) I/O 요청시 커널에 요청을 주고 커널로 부터 응답 받은 이벤트를 처리하기 위해 돌고있는 루프 유저 영역 요청 -&amp;gt; 이벤트 루프 -&amp;gt; 이벤트 루프 응답 -&amp;gt; 대기하며 진행 커널 영역 블락 -&amp;gt; 이벤트 발생 -&amp;gt; 이벤트 루프에 노티 -&amp;gt; 대기 중인 것을 실현 (javascript에서) 콜백 큐에서 콜백 함수를 꺼내 콜 스택에 넣어 주는 루프 refs DEVIEW 2014 [JS] 도대체 이벤트 루프가 뭔가요?
          
          
        
      </description>
    </item>
    
    <item>
      <title>coroutine</title>
      <link>https://chankoo.github.io/posts/coroutine/</link>
      <pubDate>Tue, 11 Oct 2022 20:39:15 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/coroutine/</guid>
      <description>
        
          
            Co-Routine. 다른 루틴과 동등한 레벨에서 상호 협력하는 루틴. routine - subroutine 으로 종속되는 개념과 대비된다.
프로그래머는 코루틴 간 제어 흐름을 의도에 따라 통제하는데, 실행 중인 코루틴이 자신의 흐름을 멈추고 다른 코루틴에 양보(yield) 하도록 하는 방식이다.
코루틴 간의 스위칭을 통해 (스레드 스위칭과 유사하게) 동시성 프로그래밍할 수 있다. 코루틴이 &amp;ldquo;lightweight&amp;rdquo; 스레드라고도 불리는 이유이다.
스레드와의 주된 차이는, 별도의 스택 메모리를 갖지 않는다(stackless coroutine)는 점, 병렬 실행이 불가하다는 점 등이 있다.
+) 작업 후 다른 루틴에게 명시적으로 제어권을 넘겨줄 경우, CPS를 따라 구현했다고 볼 수 있다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Phantom Reads</title>
      <link>https://chankoo.github.io/posts/phantom-reads/</link>
      <pubDate>Mon, 10 Oct 2022 17:37:43 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/phantom-reads/</guid>
      <description>
        
          
            range select 하는 쿼리를 반복해서 실행할때, 다른 트랜잭션의 영향으로 결과 셋이 달라지는 현상. 존재하지 않는(phantom) 새로운 행들이 나타나거나, 그렇게 나타난 행들이 사라지는 상태를 의미한다.
Serializable을 제외한 격리 수준에서 모두 발생한다. gap lock을 쓰지 않는다면, range select 쿼리의 대상인 rows set 외에는 락이 걸려있지 않으므로, 다른 트랜잭션이 새로운 row를 만들 수 있고, 그 row가 다음번 range select 에 걸릴 수 있는 것이다.
refs links Isolation Levels 직렬성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>직렬성</title>
      <link>https://chankoo.github.io/posts/%EC%A7%81%EB%A0%AC%EC%84%B1/</link>
      <pubDate>Mon, 10 Oct 2022 17:20:14 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EC%A7%81%EB%A0%AC%EC%84%B1/</guid>
      <description>
        
          
            DB 에서 직렬성은 모든 트랜잭션을 순차적으로 수행하는 것과 같은 결과를 내는 격리 수준을 의미한다.
보통 아래 세가지 방법 중 하나로 구현하는데,
실제적인 직렬 실행 - 순차적으로 트랜잭션을 실행한다. 2PL 낙관적 동시성 제어(ex. 직렬성 스냅숏 격리) refs 데이터 중심 애플리케이션 설계 links 2PL Isolation Levels 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Isolation Levels</title>
      <link>https://chankoo.github.io/posts/isolation-levels/</link>
      <pubDate>Sun, 09 Oct 2022 12:37:01 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/isolation-levels/</guid>
      <description>
        
          
            Transaction 간 격리 수준
DBMS는 다양한 수준의 Isolation Level을 제공하여 ACID의 Isolation 관점에서 엄격히 제한된 Transaction의 병행성 제약을 완화한다. 이상적으로 Transaction은 엄격히 격리해야 하지만, 실무적으로 걸림돌이 되기에, 격리 수준을 단계적으로 완화하는 Isolation Levels 를 정의하여 상황에 맞게 제공한다.
Serializable - Isolation 제약을 지키는 수준으로 트랜잭션을 serial schedule 로 수행하여 다른 트랜잭션의 수행과 겹치는 시간이 없다. Repeatable Reads 반복해서 읽어도 같은 결과를 보여주는 수준으로, 반복 read 도중 커밋이 발생하여 값이 변해도 커밋 전 값을 읽어간다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>gunicorn</title>
      <link>https://chankoo.github.io/posts/gunicorn/</link>
      <pubDate>Sun, 09 Oct 2022 12:34:05 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gunicorn/</guid>
      <description>
        
          
            UNIX 용 WSGI 서버이다.
파이썬 어플리케이션을 서빙하는 worker 를 fork하는데, worker 타입은 다음과 같다.
sync 병렬로 동작하는 N개 프로세스를 fork한다. I/O로 인한 블로킹이 적을 경우 적합 gthread N개 스레드를 fork한다. 멀티스레딩을 지원하는 앱일 경우 적합 gevent gevent로 구현한 N개 웹서버를 실행한다. I/O 바운드인 보통의 서비스에 적합 refs Gunicorn vs Python GIL. What is the Python GIL, how it works… | by Luis Sena | Medium links WSGI 7가지 동시성 모델 gevent 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Starvation</title>
      <link>https://chankoo.github.io/posts/starvation/</link>
      <pubDate>Sun, 09 Oct 2022 00:15:32 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/starvation/</guid>
      <description>
        
          
            기아 상태 여러 스레드나 프로세스가 자원을 점유하는 상황에서, 특정 스레드나 프로세스가 자원을 할당 받지 못하여 진행할 수 없는 상태
refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Race Condition</title>
      <link>https://chankoo.github.io/posts/race-condition/</link>
      <pubDate>Sat, 08 Oct 2022 21:56:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/race-condition/</guid>
      <description>
        
          
            경쟁 상태 여러 스레드나 프로세스가 한 자원에 동시에 접근하고 조작하여 예상치 못한 결과(non deterministic)을 도출할 수 있는 상태. 즉, 스레드가 자원에 접근하는 타이밍에 결과가 영향 받는 상태를 의미한다
Thread 1 Thread 2 Integer value 0 read value ← 0 read value ← 0 increase value 0 increase value 0 write back → 1 write back → 1 refs Race condition - Wikipedia links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>Thread Safe</title>
      <link>https://chankoo.github.io/posts/thread-safe/</link>
      <pubDate>Sat, 08 Oct 2022 21:07:04 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/thread-safe/</guid>
      <description>
        
          
            일반적으로, 여러 스레드가 실행해도 정상적으로 동작(매번 같은 결과를 리턴)하는 코드(변수, 함수 등)를 스레드 안전 하다고 말한다.
동시성을 다룰 땐 &amp;lsquo;스레드 안전&amp;rsquo; 해야하는데, 이를 구현하는 모델로 잠금장치, 함수형 프로그래밍, 클로저 등을 쓸 수 있겠다.
refs 7가지 동시성 모델 links 동시성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>7가지 동시성 모델</title>
      <link>https://chankoo.github.io/posts/7%EA%B0%80%EC%A7%80-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AA%A8%EB%8D%B8/</link>
      <pubDate>Sat, 08 Oct 2022 21:05:31 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/7%EA%B0%80%EC%A7%80-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AA%A8%EB%8D%B8/</guid>
      <description>
        
          
            refs links 7가지 동시성 모델 - 스레드와 잠금장치.pdf 
          
          
        
      </description>
    </item>
    
    <item>
      <title>병렬성</title>
      <link>https://chankoo.github.io/posts/%EB%B3%91%EB%A0%AC%EC%84%B1/</link>
      <pubDate>Sat, 08 Oct 2022 21:01:11 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%B3%91%EB%A0%AC%EC%84%B1/</guid>
      <description>
        
          
            여러 일을 한꺼번에 실행하는 것. Parallelism. CPU의 영역에서 명세하자면, 여러 CPU가 스레드 하나씩을 동시에 실행하는 것이다.
여러가지 일을 동시에 다루는 요구사항(동시성)을 해결하는 방법이기에 해법의 속성을 내포한다. 실제로 순차적 프로그래밍의 한계를 넘어서는 기술이다.
refs 7가지 동시성 모델 links 동시성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>동시성</title>
      <link>https://chankoo.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1/</link>
      <pubDate>Tue, 04 Oct 2022 22:32:56 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%8F%99%EC%8B%9C%EC%84%B1/</guid>
      <description>
        
          
            여러 일을 한꺼번에 다루는 것. Concurrency. CPU의 영역에서 명세하자면, CPU는 하나인데 여러 스레드에서 각각의 제어흐름을 다루고 있는 상황이다.
순차적 프로그래밍의 한계를 넘어서려는 시도이나, 여러가지 일을 동시에 다루는 척(병렬 착각, 병행성)하는 것이기에 그자체로 문제의 속성을 내포한다.
refs 7가지 동시성 모델 links 병렬성 
          
          
        
      </description>
    </item>
    
    <item>
      <title>GIL</title>
      <link>https://chankoo.github.io/posts/gil/</link>
      <pubDate>Mon, 03 Oct 2022 15:57:13 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gil/</guid>
      <description>
        
          
            파이썬 객체의 레퍼런스 카운팅이 정상적으로 동작하도록, 인터프리터의 동작을 전역적으로 통제하는 락. 여러 스레드가 한 객체의 레퍼런스 카운트를 조작하는 동시성 을 제어하기위해, GIL 을 가진 스레드만 자원을 통제할 수 있다.
더 구체적으로 말하면, 멀티 스레딩 환경에서 각 스레드는 레퍼런스 카운팅을 위해 PyObject 의 ob_refcnt를 조작하는데, 이는 race condition이다. race condition 해결을 위해 일반적인 mutex 를 사용하자니 각 객체 마다 락이 필요하고, deadlock 의 리스크도 존재한다. 그래서 파이썬(CPython)은 GIL을 통해 인터프리터 자체를 잠가버렸다.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
