<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>책 on chankoo</title>
    <link>https://chankoo.github.io/tags/%EC%B1%85/</link>
    <description>Recent content in 책 on chankoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Dec 2023 14:01:38 +0900</lastBuildDate><atom:link href="https://chankoo.github.io/tags/%EC%B1%85/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Domain Driven Design</title>
      <link>https://chankoo.github.io/posts/domain-driven-design/</link>
      <pubDate>Wed, 20 Dec 2023 14:01:38 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/domain-driven-design/</guid>
      <description>
        
          
            Domain과 Model Domain은 사용자가 SW를 사용하는 대상 영역을 말한다 SW의 본질은 (해당 도메인에서)사용자의 문제를 해결하는 것이다 그러므로 개발은 사용자 활동에 관련한 지식 체계에 집중해야 한다 지식의 양이 방대하므로 Model을 통해 추상화한다 Model의 유용성 모델과 핵심 설계는 서로 영향을 주며 구체화된다 유지보수와 계속되는 기능 개선을 가능케 한다 모델은 모든 구성원이 사용하는 언어의 중추이다 개발자와 도메인 전문가의 의사소통시 번역이 불필요하다 언어가 모델이 긴밀히 연결되므로 언어를 통해 모델을 정제할 수 있다 모델은 지식의 정수만을 뽑아낸 것이다 도메인 지식을 조직화하고 가장 중요한 요소를 구분짓는다 효과적인 모델링의 요소 개발 project의 iteration 내내 모델과 구현의 연결고리를 유지한다 모델은 언어에 기반해야하고 언어 역시 모델을 토대로 정제된다 모델은 풍부한 도메인 지식을 담아야한다.
          
          
        
      </description>
    </item>
    
    <item>
      <title>객체지향의 사실과 오해</title>
      <link>https://chankoo.github.io/posts/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B4/</link>
      <pubDate>Wed, 20 Dec 2023 13:45:58 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%EC%9D%98-%EC%82%AC%EC%8B%A4%EA%B3%BC-%EC%98%A4%ED%95%B4/</guid>
      <description>
        
          
            오해를 덜어낸 객체지향 구현 로직 (클래스가 아니라)특정한 객체를 상상하고, 우선 객체의 행동을 정의하자 정의된 행동을 기반으로 협력의 공동체를 상상해보자. 이 공동체는 요청과 응답의 흐름으로 소통할 것이고 공동체의 구성원에게는 여러가지 책임이 할당된다 다음으로 협력에 필요한 데이터 필드가 있다면 이를 정의하자. 잊지말자 상태보다 협력이 우선이다 마지막으로, (이제서야) 클래스를 구현해야한다. 게다가 클래스는 &amp;lsquo;타입&amp;rsquo;을 구현하기 위한 수단에 불과하다 더 구체적인 설계와 구현 구조설계: 도메인 모델
도메인의 본질적인 부분을 개념으로 모델링 안정적인 &amp;lsquo;구조&amp;rsquo;의 설계 기능적 요구사항 추출: 유스케이스
          
          
        
      </description>
    </item>
    
    <item>
      <title>Real MySQL</title>
      <link>https://chankoo.github.io/posts/real-mysql/</link>
      <pubDate>Mon, 27 Nov 2023 15:19:03 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/real-mysql/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>데이터 중심 애플리케이션 설계</title>
      <link>https://chankoo.github.io/posts/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A4%91%EC%8B%AC-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84/</link>
      <pubDate>Mon, 20 Nov 2023 10:27:27 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A4%91%EC%8B%AC-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%84%A4%EA%B3%84/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>가상 면접 사례로 배우는 대규모 시스템 설계 기초</title>
      <link>https://chankoo.github.io/posts/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/</link>
      <pubDate>Mon, 20 Nov 2023 10:18:08 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EA%B0%80%EC%83%81-%EB%A9%B4%EC%A0%91-%EC%82%AC%EB%A1%80%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EA%B3%84-%EA%B8%B0%EC%B4%88/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>구글 엔지니어는 이렇게 일한다</title>
      <link>https://chankoo.github.io/posts/%EA%B5%AC%EA%B8%80-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%8A%94-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%9D%BC%ED%95%9C%EB%8B%A4/</link>
      <pubDate>Wed, 08 Nov 2023 10:06:07 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EA%B5%AC%EA%B8%80-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%8A%94-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%9D%BC%ED%95%9C%EB%8B%A4/</guid>
      <description>
        
          
            소프트웨어 엔지니어링의 특징(프로그래밍과 비교한) sustainability 시간이 흐름에 따라 요구되는 기술적, 비즈니스적 변화에 capable 해야함 코드의 지속가능성을 높이는 방향성 기발한(clever) 코드가 아니라 클린한 코드 변할 가능성이 있는 의존을 제거함 규모 확장성 (주로)조직 규모, (부가적으로) 컴퓨트 자원 확장에 드는 비용보다 효용이 높은 상태를 유지해야함 트레이드 오프 만병통치약은 없으며 모든 선택 간 트레이드 오프를 따져야함 가설과 추정으로 선택하는 것도 좋지만 데이터로 근거있는 결정을 내리는게 중요할 때가 있다 refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>리얼월드 HTTP</title>
      <link>https://chankoo.github.io/posts/%EB%A6%AC%EC%96%BC%EC%9B%94%EB%93%9C-http/</link>
      <pubDate>Tue, 29 Nov 2022 19:46:55 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%A6%AC%EC%96%BC%EC%9B%94%EB%93%9C-http/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>마이크로서비스 패턴</title>
      <link>https://chankoo.github.io/posts/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Sun, 27 Nov 2022 16:20:28 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%8C%A8%ED%84%B4/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>개발자에서 아키텍트로</title>
      <link>https://chankoo.github.io/posts/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EC%84%9C-%EC%95%84%ED%82%A4%ED%85%8D%ED%8A%B8%EB%A1%9C/</link>
      <pubDate>Thu, 27 Oct 2022 22:16:50 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EC%84%9C-%EC%95%84%ED%82%A4%ED%85%8D%ED%8A%B8%EB%A1%9C/</guid>
      <description>
        
          
             아키텍트는 기술과 비즈니스 그리고 사용자를 모두 이해해야한다. 유저영역의 문제를 엔지니어링 관점에서 정의하여 소프트웨어 아키텍처를 설계한다. 아키텍처는 품질 속성과 기술 부채를 고려하여 시스템을 요소로 분리해야한다. 그리고 큰 그림 속에서 요소들을 연결하고 통합한다. 아키텍트로서 프로젝트 정리 이해관계자들은 누구였고 주요 비즈니스 목표는 무엇이었는가 최종적으로 어떤 결과를 도출했는가 어떤 기술을 사용했는가 가장 큰 리스크는 무엇이었고, 어떻게 극복했는가 다시 시작할 수 있다면 어떤 점을 다르게 하겠는가 refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>GoF의 디자인 패턴</title>
      <link>https://chankoo.github.io/posts/gof%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/</link>
      <pubDate>Thu, 27 Oct 2022 22:09:42 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/gof%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
    <item>
      <title>7가지 동시성 모델</title>
      <link>https://chankoo.github.io/posts/7%EA%B0%80%EC%A7%80-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AA%A8%EB%8D%B8/</link>
      <pubDate>Sat, 08 Oct 2022 21:05:31 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/7%EA%B0%80%EC%A7%80-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AA%A8%EB%8D%B8/</guid>
      <description>
        
          
            refs links 7가지 동시성 모델 - 스레드와 잠금장치.pdf 
          
          
        
      </description>
    </item>
    
    <item>
      <title>클린 아키텍처</title>
      <link>https://chankoo.github.io/posts/%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</link>
      <pubDate>Tue, 04 Oct 2022 21:43:18 +0900</pubDate>
      
      <guid>https://chankoo.github.io/posts/%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98/</guid>
      <description>
        
          
            refs links 
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
